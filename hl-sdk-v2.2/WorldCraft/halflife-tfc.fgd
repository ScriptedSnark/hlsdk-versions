
//
// Half-Life Team Fortress Classic game definition file (.fgd) 
// version 1.5, for Worldcraft 3.3 and above, and TF 1.5
// last update: 13 june 1999
//
// For detailed TFC editing information, go to info_design!
// http://info.gamedesign.net/
//

//
// 0531 - version 1.5 for TF 1.5
// 0531 - speed_reduction key added to item_tfgoal - it's value
//        is the % of full speed that the carrying player will 
//        move at
//      - team1_name - team4_name added to info_tfdetect to control
//        what name will appear in the VGUI menu (as opposed to red,
//        blue, etc)
//      - added to TFCMisc: non_owners_team_speak - plays to players
//        not on the team specified by "owned_by"
//      - added to TFCMisc: non_owners_team_broadcast - prints to
//        players not on the team specified by "owned_by"
// 0527 - made light, light_spot, and light_environment use the
//        lightbulb icon
//      - made ambient_generic, env_sound, and speaker use the
//        speaker icon
//      - made env_glow, env_sprite, and cycler_sprite display
//        their sprite in the 3D view.
//      - changed appropriate keys to sprite, sound, or studio type
//        to allow for file browsing from the entity properties
//      - gave env_glow a scale property... finally
//      - gave infodecal the decal() helper
//      - removed unnecessary size() declarations
//
// 0116 - version 1.0q
// 0116 - removed many defunct keys, clarified lots, big thanks
//        to Juddhunter and Ryan Desgroseilliers
//
// xxxx - old changes
// 0413 - renamed item_armorInv to item_armor3
//      - added team_no and respawn_delay to TFarmor baseclass
// 0415 - changed all references from team 1, team 2, etc to 
//        blue, red, etc as that's how it's referenced in-game
//      - removed ex_skill_min and ex_skill_max from TFCSkills as
//        this was causing problems and apparently wasn't needed
// 0421 - the following changes courtesy of Paul 'MoOg' Samways
//      - added items_allowed to func_button and func_rot_button
//      - in item_tfgoal, changed 262133 bitvalue to 262144
//      - corrected typo in item_tfgoal - items_alowed
//      - added team_speak, non_team_speak, owners_team_speak, and
//        AP_speak to info_tfgoal and i_t_g (Thanks to Decker)
// 0422 - info_tfgoal and i_t_g goal_result set to 0 by default
//        (thanks to Sean Cavanaugh)
// 0423 - corrected and added item_tfgoal hud icons item display
//        bit values (thanks again MoOg)
// 0426 - added OwnedBy baseclass to item_tfgoal (Thanks Curber)
//      - the following changes courtesy of Sean Cavanaugh (SC)
//      - fixed partial class list for several entities
//      - added Target/Targetname to info_tfgoal and item_tfgoal
//      - added TFCCriteria to armor entities
//      - added Target/Targetname to armor entities
//      - added OwnedBy baseclass to TFCCriteria
// 0427 - fixed restore_spawngroups descriptions (SC)
//      - removed Ammo baseclass from use (SC)
//      - added TFCCriteria to the Weapon baseclass (SC)
//      - added TFCCriteria baseclass to info_tfgoal - Thanks to Mirar (M)
//      - added speaking default values to info_tfgoal and i_t_g (M)
//      - removed mdl from info_tfgoal and i_t_g (M)
//      - added skin key to item_tfgoal to allow for choosing mdl color
//      - added a bunch of new key defaults to item_tfgoal (#2fort*) (M)
//      - added speaking stuff to item_tfgoal (M)
// 0428 - removed master from trigger_relay
//      - set choice default values to their first ordinal value
// 0429 - added mdl and skin back into info_tfgoal (SC)
//      - added the add/subtract health/armor/items/powerup fields to
//        item_tfgoal (SC)
//      - changed instances of wait(string) to wait(integer) (SC)
//      - added armorclass bitfields to _tfgoal entities (SC)
//      - set item_tfgoal goal_result default to 0 (SC)
//      - added increase_teamX keys to item_tfgoal and info_tfgoal_timer (SC)
//      - added items_allowed to TFCCriteria, removed duplicates (SC)
//      - added has_item_from_group and hasnt_item_from_group to TFCCritera (SC)
//      - changed item_tfgoal goal_group to group_no (SC)
//      - added goal_activation to Monsters, Doors, func_button, and 
//        func_rot_button (SC)
// 0430 - adjusted goal_activation values (above) (SC)
// 0504 - added goal_no and group_no to info_player_teamspawn (SC)
//      - added remove/restore_spawnpoint and _spawngroup to the 
//        TFCCriteria baseclass (SC)
//      - added goal_state to info_player_teamspawn (SC)
//      - added speak to info_tfgoal and i_t_g
// 0506 - added Target to light_spot
//      - changed light_spot _cone and _cone2 descriptions and defaults (MoOg)
//      - added a Multithreaded flag to the multi_manager
// 0510 - commented out dmdelay in func_recharge and func_healthcharger
// 0518 - added Weapon and Targetx bases to items
// 0524 - added Targetname to func_illusionary
//      - removed speak CTF defaults
//      - added broadcast stuff to item_tfgoal
//      - fixed playerclass error
// 0525 - removed more default CTF messages from item_tfgoal
//      - added broadcast messages to item_tfgoal
// 0526 - removed TFCSkills references
//      - made a ton of changes sent in by Brad Rembielak (BR) - Thanks!
//      - optimized TFCCriteria baseclass, moved stuff into TFCMisc (BR)
//      - added a ton of stuff to TFCMisc, to be used with HL's usable entities
//        which previously had TFCCriteria (it's a big'un .. may cull later)(BR)
//      - modified info_player_teamspawn (BR)
//      - modified i_t_g (solid version of info_tfgoal) (BR)
//      - modified info_tfgoal (BR)
//      - modified info_tfgoal_timer (BR)
//      - modified item_tfgoal (BR)
//      - the above (BR) modifications mostly involved restructuring the properties
//        and renaming descriptions to make things easier to work with
// 0531 - clarified the team allies keys in the info_tfdetect
//      - added speed key to func_plat (SC)
// 0613 - added OwnedBy baseclass to info_tfgoal and i_t_g
//      - removed Target baseclass from info_tfgoal and i_t_g (key already present)
//

//
// worldspawn
//

@SolidClass = worldspawn : "World entity"
[
	message(string) : "Map Description / Title"
	skyname(string) : "environment map (cl_skyname)"
	sounds(integer) : "CD track to play" : 1
	light(integer) : "Default light level"
	WaveHeight(string) : "Default Wave Height"
	MaxRange(string) : "Max viewable distance" : "4096"
	chaptertitle(string) : "Chapter Title Message"
	startdark(choices) : "Level Fade In" : 0 =
	[	
		0 : "No"
		1 : "Yes"
	]
	gametitle(choices) : "Display game title" : 0 = 
	[	
		0 : "No"
		1 : "Yes"
	]
	newunit(choices) : "New Level Unit" : 0 = 
	[
		0 : "No, keep current"
		1 : "Yes, clear previous levels"
	]
]

//
// BaseClasses
//

@BaseClass = Appearflags
[
	spawnflags(Flags) =
	[
		2048 : "Not in Deathmatch" : 0
	]
]

@BaseClass = OwnedBy
[
	owned_by(choices) : "Owned by?" : 0 =
	[
		0 : "Not Owned"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]
]

@BaseClass base(OwnedBy) = TFCCriteria
[
	// criteria
	team_no(choices) : "Team" : 0 =
	[
		0 : "Any"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]
	playerclass(choices) : "Player class" : 0 =
	[
		0 : "Any"
		1 : "Scout"
		2 : "Sniper"
		3 : "Soldier"
		4 : "Demolitions man"
		5 : "Medic"
		6 : "Heavy Weapons Guy"
		7 : "Pyro"
		8 : "Spy"
		9 : "Engineer"
	]

	items_allowed(integer) : "Has item #"
	has_item_from_group(integer) : "Has item from group #"
	hasnt_item_from_group(integer) : "Hasn't item from group #"

	if_item_has_moved(integer) : "If item # has moved"
	if_item_hasnt_moved(integer) : "If item # hasn't moved"

	if_goal_is_active(integer) : "If goal # active"
	if_goal_is_inactive(integer) : "If goal # inactive"
	if_goal_is_removed(integer) : "If goal # removed"

	if_group_is_active(integer) : "If group # active"
	if_group_is_inactive(integer) : "If group # inactive"
	if_group_is_removed(integer) : "If group # removed"
]

@BaseClass = TFCMisc
[
	// if criteria check fails, activate this goal instead
	else_goal(integer) : "'Else' Goal #"

	all_active(integer) : "If all goals in group # active..."
	last_impulse(integer) : "...activate goal #"

	activate_goal_no(integer) : "Activate goal #"
	inactivate_goal_no(integer) : "Inactivate goal #"
	remove_goal_no(integer) : "Remove goal #"
	restore_goal_no(integer) : "Restore goal #"

	activate_group_no(integer) : "Activate goals in group #"
	inactivate_group_no(integer) : "Inactivate goals in group #"
	remove_group_no(integer) : "Remove goals in group #"
	restore_group_no(integer) : "Restore goals in group #"

	remove_spawnpoint(integer) : "Remove Spawn point #"
	restore_spawnpoint(integer) : "Restore Spawn point #"
	remove_spawngroup(integer) : "Remove Spawn group #"
	restore_spawngroup(integer) : "Restore Spawn group #"

	items(integer) : "Item to give"
	axhitme(integer) : "Item to remove"
	return_item_no(integer) : "Return item #"
	remove_item_group(integer) : "Remove items in group #"

	// messages
	deathtype(string) : "Goal Death message"
	broadcast(string) : "Activation Message"
	team_broadcast(string) : "Team message"
	non_team_broadcast(string) : "Non-team message"
	owners_team_broadcast(string) : "Owner's team message"
	non_owners_team_broadcast(string) : "Non-Owner's team message"
	message(string) : "Message to Player"

	netname_broadcast(string) : "AP name + message"
	netname_team_broadcast(string) : "AP name + message, team"
	netname_non_team_broadcast(string) : "AP name + message, non-team"
	netname_owners_team_broadcast(string) : "AP name + message, owner"

	speak(string) : "Global speak"
	owners_team_speak(string) : "Speak (owners team)"
	AP_speak(string) : "Speak (activating player)"
	team_speak(string) : "Speak (team)"
	non_team_speak(string) : "Speak (non team)"
	non_owners_team_speak(string) : "Speak (not owners team)"

	//	All the following attributes are applied to the attributes of
	//	every player specified by the "goal_effect"(see above).

	frags(integer) : "Add/Subtract frags"
	lives(integer) : "Add/Subtract lives"
	health(integer) : "Add/Subtract health"
	//	Armortypes are:
	//		0.3 : Green
	//		0.6 : Yellow
	//		0.8 : Red
	armortype(Choices) : "Armor Type" : 0 =
	[
		0 : "normal"
		1 : "1 - kevlar"
		2 : "2 - wodden"
		4 : "4 - blast"
		8 : "8 - shock"
		16 : "16 - ceramic"
	]
	armorvalue(integer) : "Armor Value %"
	armorclass(choices) : "Armor Class" : 0 =
	[
		0 : "normal"
		1 : "1 - kevlar"
		2 : "2 - wodden"
		4 : "4 - blast"
		8 : "8 - shock"
		16 : "16 - ceramic"
	]

	ammo_shells(integer) : "Add/Subtract shells"
	ammo_nails(integer) : "Add/Subtract nails"
	ammo_rockets(integer) : "Add/Subtract rockets"
	ammo_cells(integer) : "Add/Subtract cells"
	ammo_medikit(integer) : "Add/Subtract medikit"
	ammo_detpack(integer) : "Add/Subtract detpack"

//	Note A: After applying all these values to the player, the playerclass
//		limitations of the player are applied. So if you set the health of
//		the player over that allowed, by his/her playerclass, it will then
//		be lowered to the max_health for that playerclass.
//
//	Note B: "lives" allows you to give/remove lives from players. This is only
//		useful if the current map limits the number of lives each player
//		has. See the Auto Detection section above.

//	TeamFortress Grenades can be given/removed to/from the player by setting
//	the following two variables.

	no_grenades_1(integer) : "Add/Subtract grenades #1"
	no_grenades_2(integer) : "Add/Subtract grenades #2"

//	And finally, the following attributes are added to the global time
//	and applied to every player specified by the "goal_effect"(see below).
//	(e.g. if the goal's invincible_finished is 5, then the player will
//	get invincibility for 5 seconds after activating the goal.)


//	The following 9 items push the gamedata variable limit past 128 :(
//
//	invincible_finished(integer) : "Invincibility Duration"
//	invisible_finished(integer) : "Invisibility Duration"
//	super_damage_finished(integer) : "Quad Duration"
//	radsuit_finished(integer) : "Rad Suit Duration"

//	count(integer) : "Activation Score?"
//	increase_team1(integer) : "Blue point gain"
//	increase_team2(integer) : "Red point gain"
//	increase_team3(integer) : "Yellow point gain"
//	increase_team4(integer) : "Green point gain"
]

// Not Used?
// @BaseClass size(0 0 0, 32 32 32) color(80 0 200) base(Appearflags) = Ammo []
@BaseClass size(-16 -16 0, 16 16 32) color(0 0 200) base(TFCCriteria, TFCMisc, Appearflags) = Weapon []

@BaseClass = Targetname 
[ 
targetname(target_source) : "Name"
]
@BaseClass = Target 
[ 
target(target_destination) : "Target" 
]
@BaseClass = Global 
[ 
globalname(string) : "Global Entity Name" 
]

@BaseClass base(Target) = Targetx 
[
	delay(string) : "Delay before trigger" : "0"
	killtarget(target_destination) : "KillTarget"
]

@BaseClass = RenderFxChoices
[
	renderfx(choices) :"Render FX" : 0 =
	[
		0: "Normal"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Slow Wide Pulse"
		4: "Fast Wide Pulse"
		9: "Slow Strobe"
		10: "Fast Strobe"
		11: "Faster Strobe"
		12: "Slow Flicker"
		13: "Fast Flicker"
		5: "Slow Fade Away"
		6: "Fast Fade Away"
		7: "Slow Become Solid"
		8: "Fast Become Solid"
		14: "Constant Glow"
		15: "Distort"
		16: "Hologram (Distort + fade)"
	]
]

@BaseClass base(RenderFxChoices) = RenderFields 
[
	rendermode(choices) : "Render Mode" : 0 =
	[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
	]
	renderamt(integer) : "FX Amount (1 - 255)"
	rendercolor(color255) : "FX Color (R G B)" : "0 0 0"
]

@BaseClass base(Appearflags) size(-16 -16 -36, 16 16 36) color(0 255 0) = PlayerClass []

@BaseClass base(Appearflags, Target, Targetname, RenderFields) color(0 200 200) = Monster 
[
	target(target_destination) : "Movetarget"
	TriggerTarget(String) : "TriggerTarget"
      TriggerCondition(Choices) : "Trigger Condition" : 0 =
	[
		0 : "No Trigger"
		1 : "See Player, Mad at Player"
		2 : "Take Damage"
		3 : "50% Health Remaining"
		4 : "Death"
		7 : "Hear World"
		8 : "Hear Player"
		9 : "Hear Combat"
		10: "See Player Unconditional"
		11: "See Player, Not In Combat"
	]
	goal_activation(Choices) : "Goal Activation bitfields" : 0 =
	[
		0 : "0 - None"
		4 : "4 - when above NOT true"
	]
	spawnflags(Flags) = 
	[
		1 : "WaitTillSeen" 	: 0
		2 : "Gag"		: 0
		4 : "MonsterClip"	: 0
		16: "Prisoner"		: 0
		128: "WaitForScript" 	: 0
		256: "Pre-Disaster" 	: 0
		512: "Fade Corpse"	: 0
	]
]

@BaseClass = TalkMonster
[
	UseSentence(String) : "Use Sentence"
	UnUseSentence(String) : "Un-Use Sentence"
]

@BaseClass size(-16 -16 -16, 16 16 16) = gibshooterbase
[
	targetname (target_source) : "Name"

	// how many pieces to create
	m_iGibs(integer) : "Number of Gibs" : 3
	
	// delay (in seconds) between shots. If 0, all gibs shoot at once.
	delay(string) : "Delay between shots" : "0"

	// how fast the gibs are fired
	m_flVelocity(integer) : "Gib Velocity" : 200

	// Course variance
	m_flVariance(string) : "Course Variance" : "0.15"

	// Time in seconds for gibs to live +/- 5%
	m_flGibLife(string) : "Gib Life" : "4"

	spawnflags(Flags) = 
	[
		1 : "Repeatable" 	: 0
	]
]

@BaseClass = Light 
[
	_light(color255) : "Brightness" : "255 255 128 200"
      style(Choices) : "Appearance" : 0 =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	pattern(string) : "Custom Appearance"
]

@BaseClass base(Targetname,Global) = Breakable
[
	target(target_destination) : "Target on break"
	health(integer) : "Strength" : 1
	material(choices) :"Material type" : 0 =
	[
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "Cinder Block"  
		5: "Ceiling Tile"
		6: "Computer"
		7: "Unbreakable Glass"
		8: "Rocks"
	]
	explosion(choices) : "Gibs Direction" : 0 =
	[
		0: "Random"
		1: "Relative to Attack"
	]
	delay(string) : "Delay before fire" : "0"
	gibmodel(studio) : "Gib Model" : ""
	spawnobject(choices) : "Spawn On Break" : 0 =
	[
		0: "Nothing"
		1: "Battery"
		2: "Healthkit"
		3: "9mm Handgun"
		4: "9mm Clip"
		5: "Machine Gun"
		6: "Machine Gun Clip"
		7: "Machine Gun Grenades"
		8: "Shotgun"
		9: "Shotgun Shells"
		10: "Crossbow"
		11: "Crossbow Bolts"
		12: "357"
		13: "357 clip"
		14: "RPG"
		15: "RPG Clip"
		16: "Gauss clip"
		17: "Hand grenade"
		18: "Tripmine"
		19: "Satchel Charge"
		20: "Snark"
		21: "Hornet Gun"
	]
	explodemagnitude(integer) : "Explode Magnitude (0=none)" : 0
]

@BaseClass base(Appearflags, Targetname, RenderFields, Global) = Door
[
	killtarget(target_destination) : "KillTarget"
	speed(integer) : "Speed" : 100
	master(string) : "Master" 
	goal_activation(Choices) : "Goal Activation bitfields" : 0 =
	[
		0 : "0 - none"
		4 : "4 - when above NOT true"
		8 : "8 - return upon death-drop"
	]
	movesnd(choices) : "Move Sound" : 0 = 
	[
		0: "No Sound"
		1: "Servo (Sliding)"
		2: "Pneumatic (Sliding)"
		3: "Pneumatic (Rolling)"
		4: "Vacuum"
		5: "Power Hydraulic"
		6: "Large Rollers"
		7: "Track Door"
		8: "Snappy Metal Door"
		9: "Squeaky 1"
		10: "Squeaky 2"
	]
	stopsnd(choices) : "Stop Sound" : 0 = 
	[
		0: "No Sound"
		1: "Clang with brake"
		2: "Clang reverb"
		3: "Ratchet Stop"
		4: "Chunk"
		5: "Light airbrake"
		6: "Metal Slide Stop"
		7: "Metal Lock Stop"
		8: "Snappy Metal Stop"
	]
	wait(integer) : "delay before close (-1 stay)" : 4
	lip(integer) : "Lip"
	dmg(integer) : "Damage inflicted when blocked" : 0
	target(target_destination) : "Target"
	delay(integer) : "Delay before fire" 
	netname(string) : "Fire on Close"
	health(integer) : "Health (shoot open)" : 0
	spawnflags(flags) =
	[
		1 : "Starts Open" : 0
		4 : "Don't link" : 0
		8: "Passable" : 0
	    	32: "Toggle" : 0
		256:"Use Only" : 0
		512: "Monsters Can't" : 0
	]
	// NOTE: must be duplicated in BUTTON
	locked_sound(choices) : "Locked Sound" : 0 = 
	[
		0: "None"
		2: "Access Denied"
		8: "Small zap"
		10: "Buzz"
		11: "Buzz Off"
		12: "Latch Locked"
	]
	unlocked_sound(choices) : "Unlocked Sound" : 0 = 
	[
		0: "None"
		1: "Big zap & Warmup"
		3: "Access Granted"
		4: "Quick Combolock"
		5: "Power Deadbolt 1"
		6: "Power Deadbolt 2"
		7: "Plunger"
		8: "Small zap"
		9: "Keycard Sound"
		10: "Buzz"
		13: "Latch Unlocked"
	]
	locked_sentence(choices) : "Locked Sentence" : 0 = 
	[
		0: "None"
		1: "Gen. Access Denied"
		2: "Security Lockout"
		3: "Blast Door"
		4: "Fire Door"
		5: "Chemical Door"
		6: "Radiation Door"
		7: "Gen. Containment"
		8: "Maintenance Door"
		9: "Broken Shut Door"
	]
	unlocked_sentence(choices) : "Unlocked Sentence" : 0 = 
	[
		0: "None"
		1: "Gen. Access Granted"
		2: "Security Disengaged"
		3: "Blast Door"
		4: "Fire Door"
		5: "Chemical Door"
		6: "Radiation Door"
		7: "Gen. Containment"
		8: "Maintenance area"
	]	
	_minlight(string) : "Minimum light level"
]

@BaseClass base(Targetname, Target, RenderFields, Global) = BaseTank
[
	spawnflags(flags) =
	[
		1 : "Active" : 0
		16: "Only Direct" : 0
		32: "Controllable" : 0
	]
	yawrate(string) : "Yaw rate" : "30"
	yawrange(string) : "Yaw range" : "180"
	yawtolerance(string) : "Yaw tolerance" : "15"
	pitchrate(string) : "Pitch rate" : "0"
	pitchrange(string) : "Pitch range" : "0"
	pitchtolerance(string) : "Pitch tolerance" : "5"
	barrel(string) : "Barrel Length" : "0"
	barrely(string) : "Barrel Horizontal" : "0"
	barrelz(string) : "Barrel Vertical" : "0"
	spritesmoke(string) : "Smoke Sprite" : ""
	spriteflash(string) : "Flash Sprite" : ""
	spritescale(string) : "Sprite scale" : "1"
	rotatesound(sound) : "Rotate Sound" : ""
	firerate(string) : "Rate of Fire" : "1"
	bullet_damage(string) : "Damage Per Bullet" : "0"
	persistence(string) : "Firing persistence" : "1"
	firespread(choices) : "Bullet accuracy" : 0 =
	[
		0: "Perfect Shot"
		1: "Small cone"
		2: "Medium cone"
		3: "Large cone"
		4: "Extra-large cone"
	]
	minRange(string) : "Minmum target range" : "0"
	maxRange(string) : "Maximum target range" : "0"
	_minlight(string) : "Minimum light level"
]

@BaseClass = PlatSounds 
[
	movesnd(choices) : "Move Sound" : 0 = 
	[
		0: "No Sound"
		1: "big elev 1"
		2: "big elev 2"
		3: "tech elev 1"
		4: "tech elev 2"
		5: "tech elev 3"
		6: "freight elev 1"
		7: "freight elev 2"
		8: "heavy elev"
		9: "rack elev"
		10: "rail elev"
		11: "squeek elev"
		12: "odd elev 1"
		13: "odd elev 2"
	]
	stopsnd(choices) : "Stop Sound" : 0 = 
	[
		0: "No Sound"
		1: "big elev stop1"
		2: "big elev stop2"
		3: "freight elev stop"
		4: "heavy elev stop"
		5: "rack stop"
		6: "rail stop"
		7: "squeek stop"
		8: "quick stop"
	]
	volume(string) : "Sound Volume 0.0 - 1.0" : "0.85"
]

@BaseClass base(Targetname, RenderFields, Global, PlatSounds) = Trackchange
[
	height(integer) : "Travel altitude" : 0
	spawnflags(flags) =
	[
		1: "Auto Activate train" : 0
		2: "Relink track" : 0
		8: "Start at Bottom" : 0
		16: "Rotate Only" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
	rotation(integer) : "Spin amount" : 0
	train(target_destination) : "Train to switch"
	toptrack(target_destination) : "Top track"
	bottomtrack(target_destination) : "Bottom track"
	speed(integer) : "Move/Rotate speed" : 0
]

@BaseClass base(Target, Targetname) = Trigger
[
	killtarget(target_destination) : "Kill target"
	netname(target_destination) : "Target Path"
	master(string) : "Master" 
	sounds(choices) : "Sound style" : 0 =
	[
		0 : "No Sound"
	]
	delay(string) : "Delay before trigger" : "0"
	spawnflags(flags) = 
	[
		1: "Monsters" : 0
		2: "No Clients" : 0
		4: "Pushables": 0
	]
]

//
// Team Fortress Entities
//

@SolidClass = func_nobuild : "Engineer no-build area" []

@PointClass = info_tfdetect : "TF Detection Entity"
[
	broadcast(string) : "Version String"

//    the following keys control the name that shows up in VGUI

	team1_name(string) : "Team 1 VGUI Name"
	team2_name(string) : "Team 2 VGUI Name"
	team3_name(string) : "Team 3 VGUI Name"
	team4_name(string) : "Team 4 VGUI Name"

// 	the following must be 255 characters or less

	team_broadcast(string) : "Team menu string" 
	non_team_broadcast(string) : "Map help string" 

//	impulse variable settings
//
//	Bit 1 (1)   :   Off - ClasSkin		  , On - Multiskin
//	Bit 2 (2)   :   Off - ClassPersistence Off  , On - ClassPersistence On
//	Bit 3 (4)   :   Off - CheatChecking Off	  , On - CheatChecking On
//	Bit 4 (8)   :   Off - FortressMap Off	  , On - FortressMap On
//	Bit 5 (16)  :   Off - RespawnDelay Off	  , On - RespawnDelay (See below)
//	Bit 6 (32)  :   Off - RespawnDelay Off	  , On - RespawnDelay (See below)
//	Bit 7 (64)  :   Off - AutoTeam Off		  , On - AutoTeam On
//	Bit 8 (128)	:   Off - Individual Frags	  , On - Frags = TeamScore
//
//	N.B. FortressMap will be set On automatically by the the
//		Detection entity anyway, so just ignore that Bit.
//
//	N.B. The RespawnDelay settings takes 2 bits. The value of both of
//		them determines the level of respawn delay, as follows:
//				Bit 5  		Bit 6		Result
//				 Off			 Off		No Respawn delays
//				 On			 Off		5 Second respawn delay
//				 Off			 On		10 Second respawn delay
//				 On			 On		20 Second respawn delay

	impulse(integer) : "Game Settings (toggleflags)"

//	When using the "message" variable to set do localcmd's, you
//	can issue more than one command by seperating them with \n
//	Make sure you end it with a \n too.
//	E.g. The following changes the gravity and the friction.
//		"message" "sv_gravity 200\nsv_friction .5\n"


	message(string) : "LocalCmd String"
	ammo_shells(choices) : "Blue Lives" : 0 = [ 0 : "infinite" ]
	ammo_nails(choices) : "Red Lives" : 0 = [ 0 : "infinite" ]
	ammo_rockets(choices) : "Yellow Lives" : 0 = [ 0 : "infinite" ]
	ammo_cells(choices) : "Green Lives" : 0 = [ 0 : "infinite" ]

//	The following 4 variables use toggle flags with 0 and -1 being special values.
//	For no class limits, or for making a team civilian only, use 0 and -1 respectively.
//	Otherwise, add up the bit values and use the final number as the maxammo_xxxxx value.
//
//	For example, if you wanted class 1 to be unable to play scouts or spys, you'd add the
//	two values together (1 + 256) for a value of 257, which you'd then give to maxammo_shells.

	maxammo_shells(choices) : "Blue class limits toggleflags" : 0 =
	[
		0 : "no limits"
		-1 : "civilian only"
		1 : "1 - no scout"
		2 : "2 - no sniper"
		4 : "4 - no soldier"
		8 : "8 - no demo man"
		16 : "16 - no combat medic"
		32 : "32 - no heavy weapons guy"
		64 : "64 - no pyro"
		128 : "128 - no random playerclass"
		256 : "256 - no spy"
		512 : "512 - no engineer"
	]
	maxammo_nails(choices) : "Red class limits toggleflags" : 0 =
	[
		0 : "no limits"
		-1 : "civilian only"
		1 : "1 - no scout"
		2 : "2 - no sniper"
		4 : "4 - no soldier"
		8 : "8 - no demo man"
		16 : "16 - no combat medic"
		32 : "32 - no heavy weapons guy"
		64 : "64 - no pyro"
		128 : "128 - no random playerclass"
		256 : "256 - no spy"
		512 : "512 - no engineer"
	]
	maxammo_rockets(choices) : "Yellow class limits toggleflags" : 0 =
	[
		0 : "no limits"
		-1 : "civilian only"
		1 : "1 - no scout"
		2 : "2 - no sniper"
		4 : "4 - no soldier"
		8 : "8 - no demo man"
		16 : "16 - no combat medic"
		32 : "32 - no heavy weapons guy"
		64 : "64 - no pyro"
		128 : "128 - no random playerclass"
		256 : "256 - no spy"
		512 : "512 - no engineer"
	]
	maxammo_cells(choices) : "Green class limits toggleflags" : 0 =
	[
		0 : "no limits"
		-1 : "civilian only"
		1 : "1 - no scout"
		2 : "2 - no sniper"
		4 : "4 - no soldier"
		8 : "8 - no demo man"
		16 : "16 - no combat medic"
		32 : "32 - no heavy weapons guy"
		64 : "64 - no pyro"
		128 : "128 - no random playerclass"
		256 : "256 - no spy"
		512 : "512 - no engineer"
	]
	
//	default class selection string is
//	"=== Choose your class ===\n\n1.. Scout   \n2.. Sniper  \n3.. Soldier \n4.. Demoman \n5.. Medic   \n6.. Hvwep   \n7.. Pyro    \n8.. Spy     \n9.. Engineer\n0.. Randompc\n"
	
	noise1(string) : "Blue Class Sel. String"
	noise2(string) : "Red Class Sel. String"
	noise3(string) : "Yellow Class Sel. String"
	noise4(string) : "Green Class Sel. String"

	ammo_medikit(choices) : "Max Players, Blue" : 0 =
	[
		0 : "0 - Unlimited"
	]
	ammo_detpack(choices) : "Max Players, Red" : 0 =
	[
		0 : "0 - Unlimited"
	]
	maxammo_medikit(choices) : "Max Players, Yellow" : 0 =
	[
		0 : "0 - Unlimited"
	]
	maxammo_detpack(choices) : "Max Players, Green" : 0 =
	[
		0 : "0 - Unlimited"
	]

	display_item_status1(integer) : "Item Status 1, goal no."
	display_item_status2(integer) : "Item Status 2, goal no."
	display_item_status3(integer) : "Item Status 3, goal no."
	display_item_status4(integer) : "Item Status 4, goal no."

	team_str_home(string) : "Point of origin string"
	team_str_moved(string) : "Item moved string"
	team_str_carried(string) : "Item carried string"
	non_team_str_home(string) : "Point of origin string, non team"
	non_team_str_moved(string) : "Item moved string, non team"
	non_team_str_carried(string) : "Item carried string, non team"

	hook_out(choices) : "Allow grappling hook?" : 0 =
	[
		0 : "Yes"
		1 : "No"
	]
	
	// set team allies
	team1_allies(choices) : "Blue Allies" : 0 =
	[
		0 : "No Allies"
		2 : "2 - Red" 
		4 : "4 - Yellow"
		8 : "8 - Green"
	]
	team2_allies(choices) : "Red Allies" : 0 =
	[
		0 : "No Allies"
		1 : "1 - Blue"
		4 : "4 - Yellow"
		8 : "8 - Green"
	]
	team3_allies(choices) : "Yellow Allies" : 0 =
	[
		0 : "No Allies"
		1 : "1 - Blue"
		2 : "2 - Red" 
		8 : "8 - Green"
	]
	team4_allies(choices) : "Green Allies" : 0 =
	[
		0 : "No Allies"
		1 : "1 - Blue"
		2 : "2 - Red" 
		4 : "4 - Yellow"
	]
]

@PointClass base(PlayerClass, OwnedBy) color(255 128 0) = info_player_teamspawn : "TF Team Spawnpoint"
[
	netname(string) : "EntEd name"

	// criteria
	team_no(choices) : "Team" : 0 =
	[
		0 : "Any"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]
	playerclass(choices) : "Player class" : 0 =
	[
		0 : "Any"
		1 : "Scout"
		2 : "Sniper"
		3 : "Soldier"
		4 : "Demolitions man"
		5 : "Medic"
		6 : "Heavy Weapons Guy"
		7 : "Pyro"
		8 : "Spy"
		9 : "Engineer"
	]

	items_allowed(integer) : "Has item #"
	has_item_from_group(integer) : "Has item from group #"
	hasnt_item_from_group(integer) : "Hasn't item from group #"

	if_item_has_moved(integer) : "If item # has moved"
	if_item_hasnt_moved(integer) : "If item # hasn't moved"

	if_goal_is_active(integer) : "If goal # active"
	if_goal_is_inactive(integer) : "If goal # inactive"
	if_goal_is_removed(integer) : "If goal # removed"

	if_group_is_active(integer) : "If group # active"
	if_group_is_inactive(integer) : "If group # inactive"
	if_group_is_removed(integer) : "If group # removed"
	// spawn point goal_no's are uniquely partitioned from the TFC goal entities goal_no's (as
	// are the group_no's).  You must use remove_/restore_spawn* functions to manipulate the
	// spawn points.
	goal_no(integer) : "Spawn #"
	group_no(integer) : "Spawn Group #"

	goal_state(choices) : "Goal State" : 0 =
	[
		0 : "On (restored)"
		1 : "Off (removed)"
	]

	// activation results
//	Goal Activation settings
//
//	1	:	If set, then every player who spawns on this point
//			will be given a copy of the GoalItem. Otherwise, only 
//			the first player to spawn will be given it.
//	2	:	If set, then every player who spawns on this point
//			will have the "message" displayed to them. Otherwise, only 
//			the first player to spawn will be see it.
//
//	(these are toggleflags)

	goal_activation(choices) : "Goal activation" : 3 =
	[
		0 : "0 - normal (only first gets...)"
		1 : "1 - all get item"
		2 : "2 - all get message"
	]
	items(choices) : "Item to give" : 0 =
	[
		0 : "none"
	]
	message(string) : "Spawn message"

	goal_effects(choices) : "Remove after spawn?" : 0 =
	[
		0 : "no"
		1 : "yes"
	]
	target(target_destination) : "Target"
	killtarget(target_destination) : "Kill Target"

	activate_goal_no(integer) : "Activate goal #"
]

@PointClass base(info_player_teamspawn) = i_p_t : "info_player_teamspawn shortcut" []

// new armor entities

@BaseClass base(Targetname, Target, TFCCriteria, TFCMisc) = TFArmor
[

//	The armorclass variable is a toggleflag style variable.  You can make
//	any combination of armor type, but don't get carried away. :)
//	
	respawn_delay(integer) : "Respawn delay" : 5
]

@PointClass size(-16 -16 -24, 16 16 32) base(TFArmor) = item_armor1 : "Green Armor" []
@PointClass size(-16 -16 -24, 16 16 32) base(TFArmor) = item_armor2 : "Yellow Armor" []
@PointClass size(-16 -16 -24, 16 16 32) base(TFArmor) = item_armor3 : "Red Armor" []

@PointClass base(Targetname, OwnedBy) size(32 32 32) color(255 255 0) = info_tfgoal : "TFC Goal"
[
	netname(string) : "EntEd name"
	goal_no(integer) : "Goal #"
	else_goal(integer) : "'Else' Goal #"
	group_no(integer) : "Goal Group #"

	goal_state(choices) : "Goal Initial State"  : 2 =
	[
		1 : "Active"
		2 : "Inactive"
		3 : "Removed"
	]

	// model
	mdl(string) : "Model Path/name.mdl"
	skin(choices) : "Model skin" : 1 =
	[
		1 : "1 - Red"
		2 : "2 - Blue"
		3 : "3 - Yellow"
		4 : "4 - Green"
	]
	goal_min(string) : "bounding box mins x1 y1 z1"
	goal_max(string) : "bounding box maxs x2 y2 z2"
	noise(string) : "Sound Path/name.wav"

	// item status
	display_item_status1(integer) : "Item Status 1, goal no."
	display_item_status2(integer) : "Item Status 2, goal no."
	display_item_status3(integer) : "Item Status 3, goal no."
	display_item_status4(integer) : "Item Status 4, goal no."

	team_str_home(string) : "Point of origin string"
	team_str_moved(string) : "Item moved string"
	team_str_carried(string) : "Item carried string +[AP name]"
	non_team_str_home(string) : "Point of origin string, non team"
	non_team_str_moved(string) : "Item moved string, non team"
	non_team_str_carried(string) : "Item carried string, non team +[AP name]"

	// info about activating goal
	goal_activation(Choices) : "Goal Activation bitfields" : 1 =
	[
		0 : "0 - none"
		1 : "1 - player touch"
		2 : "2 - detpack explosion"
		4 : "4 - when above NOT true"
		2048 : "2048 - drop to ground"
		4096 : "4096 - is droppable"
	]

	// criteria
	team_no(choices) : "Team" : 0 =
	[
		0 : "Any"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]
	playerclass(choices) : "Player class" : 0 =
	[
		0 : "Any"
		1 : "Scout"
		2 : "Sniper"
		3 : "Soldier"
		4 : "Demolitions man"
		5 : "Medic"
		6 : "Heavy Weapons Guy"
		7 : "Pyro"
		8 : "Spy"
		9 : "Engineer"
	]

	items_allowed(integer) : "Has item #"
	has_item_from_group(integer) : "Has item from group #"
	hasnt_item_from_group(integer) : "Hasn't item from group #"

	if_item_has_moved(integer) : "If item # has moved"
	if_item_hasnt_moved(integer) : "If item # hasn't moved"

	if_goal_is_active(integer) : "If goal # active"
	if_goal_is_inactive(integer) : "If goal # inactive"
	if_goal_is_removed(integer) : "If goal # removed"

	if_group_is_active(integer) : "If group # active"
	if_group_is_inactive(integer) : "If group # inactive"
	if_group_is_removed(integer) : "If group # removed"

	// what the goal affects
	goal_effects(Choices) : "Goal Effects bitfields" : 1 =
	[
		1 : "1 - Activating Player(AP)"
		2 : "2 - APs team"
		4 : "4 - Not on APs team"
		8 : "8 - Not the AP"
		16 : "16 - Walls obstruct radius"
		32 : "32 - Effect same environment"
	]
	maxammo_shells(Choices) : "Effect all AP team" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	maxammo_nails(Choices) : "Effect all but AP team" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	t_length(Choices) : "Effect Radius" : 0 =
	[
		0 : "not applicable"
	]
	
	// the behaviour of the goal going active
	wait(integer) : "Wait"
	delay_time(integer) : "Activation delay"

	// what the goal does after it activates
	goal_result(Choices) : "Goal Result bitfields" : 0 =
	[
		0 : "none"
		1 : "1 - remove immediately"
		2 : "2 - goals apply AP mods"
		4 : "4 - scores, intermission, end"
		8 : "8 - GoalItems don't apply results"
		16 : "16 - reset spy"
		32 : "32 - force respawn"
	]

	target(target_destination) : "Target" 
	killtarget(string) : "Killtarget"

	all_active(integer) : "If all goals in group # active..."
	last_impulse(integer) : "...activate goal #"

	activate_goal_no(integer) : "Activate goal #"
	inactivate_goal_no(integer) : "Inactivate goal #"
	remove_goal_no(integer) : "Remove goal #"
	restore_goal_no(integer) : "Restore goal #"

	activate_group_no(integer) : "Activate goals in group #"
	inactivate_group_no(integer) : "Inactivate goals in group #"
	remove_group_no(integer) : "Remove goals in group #"
	restore_group_no(integer) : "Restore goals in group #"

	remove_spawnpoint(integer) : "Remove Spawn point #"
	restore_spawnpoint(integer) : "Restore Spawn point #"
	remove_spawngroup(integer) : "Remove Spawn group #"
	restore_spawngroup(integer) : "Restore Spawn group #"

	items(integer) : "Item to give"
	axhitme(integer) : "Item to remove"
	return_item_no(integer) : "Return item #"
	remove_item_group(integer) : "Remove items in group #"

	// messages
	deathtype(string) : "Goal Death message"
	broadcast(string) : "Activation Message"
	team_broadcast(string) : "Team message"
	non_team_broadcast(string) : "Non-team message"
	owners_team_broadcast(string) : "Owner's team message"
	message(string) : "Message to Player"

	netname_broadcast(string) : "AP name + message"
	netname_team_broadcast(string) : "AP name + message, team"
	netname_non_team_broadcast(string) : "AP name + message, non-team"
	netname_owners_team_broadcast(string) : "AP name + message, owner"

	speak(string) : "Global speak"
	owners_team_speak(string) : "Speak (owners team)"
	AP_speak(string) : "Speak (activating player)"
	team_speak(string) : "Speak (team)"
	non_team_speak(string) : "Speak (non team)"

	//	All the following attributes are applied to the attributes of
//	every player specified by the "goal_effect"(see above). 

	frags(integer) : "Add/Subtract frags"
	lives(integer) : "Add/Subtract lives"
	health(integer) : "Add/Subtract health"
//	Armortypes are:   
//		0.3 : Green
//		0.6 : Yellow
//		0.8 : Red
	armortype(integer) : "Armor Type"
	armorvalue(integer) : "Armor Value %"
	armorclass(choices) : "Armor Class" : 0 =
	[
		0 : "normal"
		1 : "1 - kevlar"
		2 : "2 - wodden"
		4 : "4 - blast"
		8 : "8 - shock"
		16 : "16 - ceramic"
	]

	ammo_shells(integer) : "Add/Subtract shells"
	ammo_nails(integer) : "Add/Subtract nails"
	ammo_rockets(integer) : "Add/Subtract rockets"
	ammo_cells(integer) : "Add/Subtract cells"
	ammo_medikit(integer) : "Add/Subtract medikit"
	ammo_detpack(integer) : "Add/Subtract detpack"

//	Note A: After applying all these values to the player, the playerclass 
//		limitations of the player are applied. So if you set the health of 
//		the player over that allowed, by his/her playerclass, it will then 
//		be lowered to the max_health for that playerclass.
//
//	Note B: "lives" allows you to give/remove lives from players. This is only
//		useful if the current map limits the number of lives each player
//		has. See the Auto Detection section above.

//	TeamFortress Grenades can be given/removed to/from the player by setting
//	the following two variables.

	no_grenades_1(integer) : "Add/Subtract grenades #1"
	no_grenades_2(integer) : "Add/Subtract grenades #2"

//	And finally, the following attributes are added to the global time
//	and applied to every player specified by the "goal_effect"(see below). 
//	(e.g. if the goal's invincible_finished is 5, then the player will
//	get invincibility for 5 seconds after activating the goal.)

	invincible_finished(integer) : "Invincibility Duration"
	invisible_finished(integer) : "Invisibility Duration"
	super_damage_finished(integer) : "Quad Duration"
	radsuit_finished(integer) : "Rad Suit Duration"

	count(integer) : "Activation Score?"
	increase_team1(integer) : "Blue point gain"
	increase_team2(integer) : "Red point gain"
	increase_team3(integer) : "Yellow point gain"
	increase_team4(integer) : "Green point gain"
]

@SolidClass base(Targetname, OwnedBy) color(255 255 0) = i_t_g : "TFC Goal shortcut, solid"
[
	netname(string) : "EntEd name"
	// info about goal initial state
	goal_no(integer) : "Goal #"
	else_goal(integer) : "'Else' Goal #"
	group_no(integer) : "Goal Group #"

	goal_state(choices) : "Goal Initial State"  : 2 =
	[
		1 : "Active"
		2 : "Inactive"
		3 : "Removed"
	]

	noise(string) : "Sound Path/name.wav"

	// item status
	display_item_status1(integer) : "Item Status 1, goal no."
	display_item_status2(integer) : "Item Status 2, goal no."
	display_item_status3(integer) : "Item Status 3, goal no."
	display_item_status4(integer) : "Item Status 4, goal no."

	team_str_home(string) : "Point of origin string"
	team_str_moved(string) : "Item moved string"
	team_str_carried(string) : "Item carried string +[AP name]"
	non_team_str_home(string) : "Point of origin string, non team"
	non_team_str_moved(string) : "Item moved string, non team"
	non_team_str_carried(string) : "Item carried string, non team +[AP name]"

	// info about activating goal
	goal_activation(Choices) : "Goal Activation bitfields" : 1 =
	[
		0 : "0 - none"
		1 : "1 - player touch"
		2 : "2 - detpack explosion"
		4 : "4 - when above NOT true"
//		2048 : "2048 - drop to ground"
//		4096 : "4096 - is droppable"
	]

	// criteria
	team_no(choices) : "Team" : 0 =
	[
		0 : "Any"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]
	playerclass(choices) : "Player class" : 0 =
	[
		0 : "Any"
		1 : "Scout"
		2 : "Sniper"
		3 : "Soldier"
		4 : "Demolitions man"
		5 : "Medic"
		6 : "Heavy Weapons Guy"
		7 : "Pyro"
		8 : "Spy"
		9 : "Engineer"
	]

	items_allowed(integer) : "Has item #"
	has_item_from_group(integer) : "Has item from group #"
	hasnt_item_from_group(integer) : "Hasn't item from group #"

	if_item_has_moved(integer) : "If item # has moved"
	if_item_hasnt_moved(integer) : "If item # hasn't moved"

	if_goal_is_active(integer) : "If goal # active"
	if_goal_is_inactive(integer) : "If goal # inactive"
	if_goal_is_removed(integer) : "If goal # removed"

	if_group_is_active(integer) : "If group # active"
	if_group_is_inactive(integer) : "If group # inactive"
	if_group_is_removed(integer) : "If group # removed"

	// what the goal affects
	goal_effects(Choices) : "Goal Effects bitfields" : 1 =
	[
		1 : "1 - Activating Player(AP)"
		2 : "2 - APs team"
		4 : "4 - Not on APs team"
		8 : "8 - Not the AP"
		16 : "16 - Walls obstruct radius"
		32 : "32 - Effect same environment"
	]
	maxammo_shells(Choices) : "Effect all AP team" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	maxammo_nails(Choices) : "Effect all but AP team" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	t_length(Choices) : "Effect Radius" : 0 =
	[
		0 : "not applicable"
	]
	
	// the behaviour of the goal going active
	wait(integer) : "Wait"
	delay_time(integer) : "Activation delay"

	// what the goal does after it activates
	target(target_destination) : "Target" 
	killtarget(string) : "Killtarget"
	all_active(integer) : "If all goals in group # active..."
	last_impulse(integer) : "...activate goal #"

	activate_goal_no(integer) : "Activate goal #"
	inactivate_goal_no(integer) : "Inactivate goal #"
	remove_goal_no(integer) : "Remove goal #"
	restore_goal_no(integer) : "Restore goal #"

	activate_group_no(integer) : "Activate goals in group #"
	inactivate_group_no(integer) : "Inactivate goals in group #"
	remove_group_no(integer) : "Remove goals in group #"
	restore_group_no(integer) : "Restore goals in group #"

	remove_spawnpoint(integer) : "Remove Spawn point #"
	restore_spawnpoint(integer) : "Restore Spawn point #"
	remove_spawngroup(integer) : "Remove Spawn group #"
	restore_spawngroup(integer) : "Restore Spawn group #"

	items(integer) : "Item to give"
	axhitme(integer) : "Item to remove"
	return_item_no(integer) : "Return item #"
	remove_item_group(integer) : "Remove items in group #"

	goal_result(Choices) : "Goal Result bitfields" : 0 =
	[
		0 : "none"
		1 : "1 - remove immediately"
		2 : "2 - goals apply AP mods"
		4 : "4 - scores, intermission, end"
		8 : "8 - GoalItems don't apply results"
		16 : "16 - reset spy"
		32 : "32 - force respawn"
	]

	// messages
	deathtype(string) : "Goal Death message"
	broadcast(string) : "Activation Message"
	team_broadcast(string) : "Team message"
	non_team_broadcast(string) : "Non-team message"
	owners_team_broadcast(string) : "Owner's team message"
	message(string) : "Message to Player"

	netname_broadcast(string) : "AP name + message"
	netname_team_broadcast(string) : "AP name + message, team"
	netname_non_team_broadcast(string) : "AP name + message, non-team"
	netname_owners_team_broadcast(string) : "AP name + message, owner"

	speak(string) : "Global speak"
	owners_team_speak(string) : "Speak (owners team)"
	AP_speak(string) : "Speak (activating player)"
	team_speak(string) : "Speak (team)"
	non_team_speak(string) : "Speak (non team)"

	//	All the following attributes are applied to the attributes of
//	every player specified by the "goal_effect"(see above). 

	frags(integer) : "Add/Subtract frags"
	lives(integer) : "Add/Subtract lives"
	health(integer) : "Add/Subtract health"
//	Armortypes are:   
//		0.3 : Green
//		0.6 : Yellow
//		0.8 : Red
	armortype(integer) : "Armor Type"
	armorvalue(integer) : "Armor Value #"
	armorclass(choices) : "Armor Class" : 0 =
	[
		0 : "normal"
		1 : "1 - kevlar"
		2 : "2 - wodden"
		4 : "4 - blast"
		8 : "8 - shock"
		16 : "16 - ceramic"
	]

	ammo_shells(integer) : "Add/Subtract shells"
	ammo_nails(integer) : "Add/Subtract nails"
	ammo_rockets(integer) : "Add/Subtract rockets"
	ammo_cells(integer) : "Add/Subtract cells"
	ammo_medikit(integer) : "Add/Subtract medikit"
	ammo_detpack(integer) : "Add/Subtract detpack"

//	Note A: After applying all these values to the player, the playerclass 
//		limitations of the player are applied. So if you set the health of 
//		the player over that allowed, by his/her playerclass, it will then 
//		be lowered to the max_health for that playerclass.
//
//	Note B: "lives" allows you to give/remove lives from players. This is only
//		useful if the current map limits the number of lives each player
//		has. See the Auto Detection section above.

//	TeamFortress Grenades can be given/removed to/from the player by setting
//	the following two variables.

	no_grenades_1(integer) : "Add/Subtract grenades #1"
	no_grenades_2(integer) : "Add/Subtract grenades #2"

//	And finally, the following attributes are added to the global time
//	and applied to every player specified by the "goal_effect"(see below). 
//	(e.g. if the goal's invincible_finished is 5, then the player will
//	get invincibility for 5 seconds after activating the goal.)

	invincible_finished(integer) : "Invincibility Duration"
	invisible_finished(integer) : "Invisibility Duration"
	super_damage_finished(integer) : "Quad Duration"
	radsuit_finished(integer) : "Rad Suit Duration"

	count(integer) : "Activation Score?"
	increase_team1(integer) : "Blue point gain"
	increase_team2(integer) : "Red point gain"
	increase_team3(integer) : "Yellow point gain"
	increase_team4(integer) : "Green point gain"
]

@PointClass base(OwnedBy, Targetname) size(16 16 16) color(255 255 0) = info_tfgoal_timer : "Goal Timer"
[
	netname(string) : "EntEd name"
	// info about goal initial state
	goal_no(integer) : "Goal #"
	else_goal(integer) : "'Else' Goal #"
	group_no(integer) : "Goal Group #"

	goal_state(choices) : "Goal Initial State"  : 2 =
	[
		1 : "Active"
		2 : "Inactive"
		3 : "Removed"
	]

//	// model
//	mdl(string) : "Model Path/name.mdl"
//	skin(choices) : "Model skin" : 1 =
//	[
//		1 : "1 - Red"
//		2 : "2 - Blue"
//		3 : "3 - Yellow"
//		4 : "4 - Green"
//	]
//	goal_min(string) : "bounding box mins x1 y1 z1"
//	goal_max(string) : "bounding box maxs x2 y2 z2"
	noise(string) : "Sound Path/name.wav"

	// item status
	display_item_status1(integer) : "Item Status 1, goal no."
	display_item_status2(integer) : "Item Status 2, goal no."
	display_item_status3(integer) : "Item Status 3, goal no."
	display_item_status4(integer) : "Item Status 4, goal no."

	team_str_home(string) : "Point of origin string"
	team_str_moved(string) : "Item moved string"
	team_str_carried(string) : "Item carried string +[AP name]"
	non_team_str_home(string) : "Point of origin string, non team"
	non_team_str_moved(string) : "Item moved string, non team"
	non_team_str_carried(string) : "Item carried string, non team +[AP name]"

	// what the goal affects
	maxammo_shells(Choices) : "Effect all on Team" : 0 =
	[
		0 : "All"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]
	maxammo_nails(Choices) : "Effect all not on Team" : 0 =
	[
		0 : "None"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]

	// criteria
	team_no(choices) : "Team" : 0 =
	[
		0 : "Any"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]
	playerclass(choices) : "Player class" : 0 =
	[
		0 : "Any"
		1 : "Scout"
		2 : "Sniper"
		3 : "Soldier"
		4 : "Demolitions man"
		5 : "Medic"
		6 : "Heavy Weapons Guy"
		7 : "Pyro"
		8 : "Spy"
		9 : "Engineer"
	]

	items_allowed(integer) : "Has item #"
	has_item_from_group(integer) : "Has item from group #"
	hasnt_item_from_group(integer) : "Hasn't item from group #"

	if_item_has_moved(integer) : "If item # has moved"
	if_item_hasnt_moved(integer) : "If item # hasn't moved"

	if_goal_is_active(integer) : "If goal # active"
	if_goal_is_inactive(integer) : "If goal # inactive"
	if_goal_is_removed(integer) : "If goal # removed"

	if_group_is_active(integer) : "If group # active"
	if_group_is_inactive(integer) : "If group # inactive"
	if_group_is_removed(integer) : "If group # removed"

	goal_effects(Choices) : "Goal Effects bitfields" : 0 =
	[
		0  : "None"
		16 : "16 - Walls obstruct radius"
		32 : "32 - Effect same environment"
		64 : "64 - Effect individually in group"
	]
	t_length(Choices) : "Effect Radius" : 0 =
	[
		0 : "not applicable"
	]
	goal_result(choices) : "Goal Result bitfields" : 0 =
	[
		0 : "None"
		1 : "1 - remove after activating"
	]

	// the behaviour of the goal going active
	wait(integer) : "Wait"
	search_time(integer) : "Delay between activations"
	delay(string) : "Delay before trigger" : "0"

	target(target_destination) : "Target" 
	killtarget(string) : "Killtarget"

	all_active(integer) : "If all goals in group # active..."
	last_impulse(integer) : "...activate goal #"

	activate_goal_no(integer) : "Activate goal #"
	inactivate_goal_no(integer) : "Inactivate goal #"
	remove_goal_no(integer) : "Remove goal #"
	restore_goal_no(integer) : "Restore goal #"

	activate_group_no(integer) : "Activate goals in group #"
	inactivate_group_no(integer) : "Inactivate goals in group #"
	remove_group_no(integer) : "Remove goals in group #"
	restore_group_no(integer) : "Restore goals in group #"

	remove_spawnpoint(integer) : "Remove Spawn point #"
	restore_spawnpoint(integer) : "Restore Spawn point #"
	remove_spawngroup(integer) : "Remove Spawn group #"
	restore_spawngroup(integer) : "Restore Spawn group #"

	items(integer) : "Item to give"
	axhitme(integer) : "Item to remove"
	return_item_no(integer) : "Return item #"
	remove_item_group(integer) : "Remove items in group #"

	// messages
	deathtype(string) : "Goal Death message"
	broadcast(string) : "Activation Message"
//	team_broadcast(string) : "Team message"
	non_team_broadcast(string) : "Non-team message"
	owners_team_broadcast(string) : "Owner's team message"
//	message(string) : "Message to Player"

	netname_broadcast(string) : "AP name + message"
//	netname_team_broadcast(string) : "AP name + message, team"
	netname_non_team_broadcast(string) : "AP name + message, non-team"
	netname_owners_team_broadcast(string) : "AP name + message, owner"

	speak(string) : "Global speak"
	owners_team_speak(string) : "Speak (owners team)"
	AP_speak(string) : "Speak (activating player)"
	team_speak(string) : "Speak (team)"
	non_team_speak(string) : "Speak (non team)"

	//	All the following attributes are applied to the attributes of
//	every player specified by the "goal_effect"(see above). 

	frags(integer) : "Add/Subtract frags"
	lives(integer) : "Add/Subtract lives"
	health(integer) : "Add/Subtract health"
//	Armortypes are:   
//		0.3 : Green
//		0.6 : Yellow
//		0.8 : Red
	armortype(integer) : "Armor Type"
	armorvalue(integer) : "Armor Value %"
	armorclass(choices) : "Armor Class" : 0 =
	[
		0 : "normal"
		1 : "1 - kevlar"
		2 : "2 - wodden"
		4 : "4 - blast"
		8 : "8 - shock"
		16 : "16 - ceramic"
	]

	ammo_shells(integer) : "Add/Subtract shells"
	ammo_nails(integer) : "Add/Subtract nails"
	ammo_rockets(integer) : "Add/Subtract rockets"
	ammo_cells(integer) : "Add/Subtract cells"
	ammo_medikit(integer) : "Add/Subtract medikit"
	ammo_detpack(integer) : "Add/Subtract detpack"

//	Note A: After applying all these values to the player, the playerclass 
//		limitations of the player are applied. So if you set the health of 
//		the player over that allowed, by his/her playerclass, it will then 
//		be lowered to the max_health for that playerclass.
//
//	Note B: "lives" allows you to give/remove lives from players. This is only
//		useful if the current map limits the number of lives each player
//		has. See the Auto Detection section above.

//	TeamFortress Grenades can be given/removed to/from the player by setting
//	the following two variables.

	no_grenades_1(integer) : "Add/Subtract grenades #1"
	no_grenades_2(integer) : "Add/Subtract grenades #2"

//	And finally, the following attributes are added to the global time
//	and applied to every player specified by the "goal_effect"(see below). 
//	(e.g. if the goal's invincible_finished is 5, then the player will
//	get invincibility for 5 seconds after activating the goal.)

	invincible_finished(integer) : "Invincibility Duration"
	invisible_finished(integer) : "Invisibility Duration"
	super_damage_finished(integer) : "Quad Duration"
	radsuit_finished(integer) : "Rad Suit Duration"

	count(integer) : "Activation Score?"
	increase_team1(integer) : "Blue point gain"
	increase_team2(integer) : "Red point gain"
	increase_team3(integer) : "Yellow point gain"
	increase_team4(integer) : "Green point gain"
]

@PointClass base(info_tfgoal_timer) = i_t_t : "info_tfgoal_timer shortcut" []

@PointClass base(Targetname, OwnedBy) size(16 16 16) color(255 128 0) = item_tfgoal : "Goal Item"
[
	netname(string) : "EntEd name"
	speed_reduction(integer) : "Percentage of full speed" // new for tf 1.5
	// info about goal initial state
	goal_no(integer) : "Goal #"
	else_goal(integer) : "'Else' Goal #"
	group_no(integer) : "Goal Group #"
	goal_state(choices) : "Goal Initial State"  : 2 =
	[
		1 : "Active"
		2 : "Inactive"
		3 : "Removed"
	]

	// model
	mdl(string) : "Model Path/name.mdl"
	skin(choices) : "Model skin" : 1 =
	[
		1 : "1 - Red"
		2 : "2 - Blue"
		3 : "3 - Yellow"
		4 : "4 - Green"
	]
	goal_min(string) : "bounding box mins x1 y1 z1"
	goal_max(string) : "bounding box maxs x2 y2 z2"
	noise(string) : "Sound Path/name.wav"

	// item status
	display_item_status1(integer) : "Item Status 1, goal no."
	display_item_status2(integer) : "Item Status 2, goal no."
	display_item_status3(integer) : "Item Status 3, goal no."
	display_item_status4(integer) : "Item Status 4, goal no."

	team_str_home(string) : "Point of origin string"
	team_str_moved(string) : "Item moved string"
	team_str_carried(string) : "Item carried string +[AP name]"
	non_team_str_home(string) : "Point of origin string, non team"
	non_team_str_moved(string) : "Item moved string, non team"
	non_team_str_carried(string) : "Item carried string, non team +[AP name]"

	goal_activation(choices) : "Goal Activation bitfields" : 1 =
	[
		0 : "0 - none"
		1 : "1 - player glows"
		2 : "2 - move at half-speed"
		4 : "4 - drop item on death"
		8 : "8 - return upon death-drop"
		16 : "16 - return if removed by goal"
		32 : "32 - return if (128) is set"
		64 : "64 - above NOT true"
		128 : "128 - remove after pause"
		256 : "256 - keep item after respawn"
		512 : "512 - glow when not carried"
		1024 : "1024 - player keeps effects"
		2048 : "2048 - drop to ground"
		4096 : "4096 - is droppable"
		8192 : "8192 - is solid"
	]

	// criteria
	team_no(choices) : "Team" : 0 =
	[
		0 : "Any"
		1 : "Blue"
		2 : "Red"
		3 : "Yellow"
		4 : "Green"
	]
	playerclass(choices) : "Player class" : 0 =
	[
		0 : "Any"
		1 : "Scout"
		2 : "Sniper"
		3 : "Soldier"
		4 : "Demolitions man"
		5 : "Medic"
		6 : "Heavy Weapons Guy"
		7 : "Pyro"
		8 : "Spy"
		9 : "Engineer"
	]

	items_allowed(integer) : "Has item #"
	has_item_from_group(integer) : "Has item from group #"
	hasnt_item_from_group(integer) : "Hasn't item from group #"

	if_item_has_moved(integer) : "If item # has moved"
	if_item_hasnt_moved(integer) : "If item # hasn't moved"

	if_goal_is_active(integer) : "If goal # active"
	if_goal_is_inactive(integer) : "If goal # inactive"
	if_goal_is_removed(integer) : "If goal # removed"

	if_group_is_active(integer) : "If group # active"
	if_group_is_inactive(integer) : "If group # inactive"
	if_group_is_removed(integer) : "If group # removed"

	// what the goal affects
	goal_effects(Choices) : "Goal Effects bitfields" : 1 =
	[
		1 : "1 - Activating Player(AP)"
		2 : "2 - APs team"
		4 : "4 - Not on APs team"
		8 : "8 - Not the AP"
		16 : "16 - Walls obstruct radius"
		32 : "32 - Effect same environment"
	]
	maxammo_shells(Choices) : "Effect all AP team" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	maxammo_nails(Choices) : "Effect all but AP team" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	t_length(Choices) : "Effect Radius" : 0 =
	[
		0 : "not applicable"
	]
	
	target(target_destination) : "Target" 
	killtarget(string) : "Killtarget"

	all_active(integer) : "If all goals in group # active..."
	last_impulse(integer) : "...activate goal #"

	activate_goal_no(integer) : "Activate goal #"
	inactivate_goal_no(integer) : "Inactivate goal #"
	remove_goal_no(integer) : "Remove goal #"
	restore_goal_no(integer) : "Restore goal #"

	activate_group_no(integer) : "Activate goals in group #"
	inactivate_group_no(integer) : "Inactivate goals in group #"
	remove_group_no(integer) : "Remove goals in group #"
	restore_group_no(integer) : "Restore goals in group #"

	remove_spawnpoint(integer) : "Remove Spawn point #"
	restore_spawnpoint(integer) : "Restore Spawn point #"
	remove_spawngroup(integer) : "Remove Spawn group #"
	restore_spawngroup(integer) : "Restore Spawn group #"

	axhitme(integer) : "Item to remove"
	return_item_no(integer) : "Return item #"
	remove_item_group(integer) : "Remove items in group #"

	// messages
	deathtype(string) : "Goal Death message"
	broadcast(string) : "Activation Message"
	team_broadcast(string) : "Team message"
	non_team_broadcast(string) : "Non-team message"
	owners_team_broadcast(string) : "Owner's team message"
	message(string) : "Message to Player"

	netname_broadcast(string) : "AP name + message"
	netname_team_broadcast(string) : "AP name + message, team"
	netname_non_team_broadcast(string) : "AP name + message, non-team"
	netname_owners_team_broadcast(string) : "AP name + message, owner"

	speak(string) : "Global speak"
	owners_team_speak(string) : "Speak (owners team)"
	AP_speak(string) : "Speak (activating player)"
	team_speak(string) : "Speak (team)"
	non_team_speak(string) : "Speak (non team)"

	//	All the following attributes are applied to the attributes of
//	every player specified by the "goal_effect"(see above). 

	frags(integer) : "Add/Subtract frags"
	lives(integer) : "Add/Subtract lives"
	health(integer) : "Add/Subtract health"
//	Armortypes are:   
//		0.3 : Green
//		0.6 : Yellow
//		0.8 : Red
	armortype(integer) : "Armor Type"
	armorvalue(integer) : "Armor Value %"
	armorclass(choices) : "Armor Class" : 0 =
	[
		0 : "normal"
		1 : "1 - kevlar"
		2 : "2 - wodden"
		4 : "4 - blast"
		8 : "8 - shock"
		16 : "16 - ceramic"
	]

	ammo_shells(integer) : "Add/Subtract shells"
	ammo_nails(integer) : "Add/Subtract nails"
	ammo_rockets(integer) : "Add/Subtract rockets"
	ammo_cells(integer) : "Add/Subtract cells"
	ammo_medikit(integer) : "Add/Subtract medikit"
	ammo_detpack(integer) : "Add/Subtract detpack"

//	Note A: After applying all these values to the player, the playerclass 
//		limitations of the player are applied. So if you set the health of 
//		the player over that allowed, by his/her playerclass, it will then 
//		be lowered to the max_health for that playerclass.
//
//	Note B: "lives" allows you to give/remove lives from players. This is only
//		useful if the current map limits the number of lives each player
//		has. See the Auto Detection section above.

//	TeamFortress Grenades can be given/removed to/from the player by setting
//	the following two variables.

	no_grenades_1(integer) : "Add/Subtract grenades #1"
	no_grenades_2(integer) : "Add/Subtract grenades #2"

//	And finally, the following attributes are added to the global time
//	and applied to every player specified by the "goal_effect"(see below). 
//	(e.g. if the goal's invincible_finished is 5, then the player will
//	get invincibility for 5 seconds after activating the goal.)

	invincible_finished(integer) : "Invincibility Duration"
	invisible_finished(integer) : "Invisibility Duration"
	super_damage_finished(integer) : "Quad Duration"
	radsuit_finished(integer) : "Rad Suit Duration"

	count(integer) : "Activation Score?"
	increase_team1(integer) : "Blue point gain"
	increase_team2(integer) : "Red point gain"
	increase_team3(integer) : "Yellow point gain"
	increase_team4(integer) : "Green point gain"

	pausetime(integer) : "Pause (stays on ground) seconds"
	distance(integer) : "Activate Goal if all carried (any)"
	speed(integer) : "Activate Goal if all carried (one)"

	impulse(integer) : "Restore goal on return"
	goal_result(choices) : "Goal Result bitfields" : 0 =
	[
		0 : "None"
		2 : "2 - no AP bonus"
		16 : "16 - reset spy"
	]

	team_drop(string) : "msg, death drop, owner team"
	non_team_drop(string) : "msg, death drop, non owners"
	netname_team_drop(string) : "AP+msg, death drop, owner team"
	netname_non_team_drop(string) : "AP+msg, death drop, non owners"

	noise3(string) : "Return to start msg, team"
	noise4(string) : "Return to start msg, owners"

	items(choices) : "Highlight HUD items bitvalue" : 0 = 
	[
		0 : "No Highlighting"
		131072 : "131072 - Blue"
		262144 : "262144 - Red"
		16777216 : "16777216 - Yellow"
		33554432 : "33554432 - Green"
	]
]

@PointClass = _____halflife_____ : "Never ever ever use this!" []

//
// Entities
//

@PointClass base(Targetname, Targetx) size(-16 -16 0, 16 16 72) color(255 0 255) = aiscripted_sequence : "AI Scripted Sequence"
[
	m_iszEntity(string) : "Target Monster"
	m_iszPlay(string) : "Action Animation" : ""
	m_flRadius(integer) : "Search Radius" : 512
	m_flRepeat(integer) : "Repeat Rate ms" : 0
	m_fMoveTo(Choices) : "Move to Position" : 0 =
	[
		0 : "No"
		1 : "Walk"
		2 : "Run"
		4 : "Instantaneous"
		5 : "No - Turn to Face"
	]
	m_iFinishSchedule(Choices) : "AI Schedule when done" : 0 =
	[
		0 : "Default AI"
		1 : "Ambush"
	]
	spawnflags(Flags) = 
	[
		4 : "Repeatable"		: 0
		8 : "Leave Corpse"	: 0
	]
]

@PointClass iconsprite("sprites/speaker.spr") base(Targetname) = ambient_generic : "Universal Ambient"
[
	message(sound) : "Path/filename.wav of WAV"
	health(integer) : "Volume (10 = loudest)" : 10
	preset(choices) :"Dynamic Presets" : 0 =
	[
		0: "None"
		1: "Huge Machine"
		2: "Big Machine"
		3: "Machine"
		4: "Slow Fade in"  
		5: "Fade in"
		6: "Quick Fade in"
		7: "Slow Pulse"
		8: "Pulse"
		9: "Quick pulse"
		10: "Slow Oscillator"
		11: "Oscillator"
		12: "Quick Oscillator"
		13: "Grunge pitch"
		14: "Very low pitch"
		15: "Low pitch"
		16: "High pitch"
		17: "Very high pitch"
		18: "Screaming pitch"
		19: "Oscillate spinup/down"
		20: "Pulse spinup/down"
		21: "Random pitch"
		22: "Random pitch fast"
		23: "Incremental Spinup"
		24: "Alien"
		25: "Bizzare"
		26: "Planet X"
		27: "Haunted"
	]
	volstart(integer) : "Start Volume" : 0
	fadein(integer) : "Fade in time (0-100)" : 0
	fadeout(integer) : "Fade out time (0-100)" : 0
	pitch(integer) : "Pitch (> 100 = higher)" : 100
	pitchstart(integer) : "Start Pitch" : 100
	spinup(integer) : "Spin up time (0-100)" : 0
	spindown(integer) : "Spin down time (0-100)" : 0
	lfotype(integer) : "LFO type 0)off 1)sqr 2)tri 3)rnd" : 0
	lforate(integer) : "LFO rate (0-1000)" : 0
	lfomodpitch(integer) : "LFO mod pitch (0-100)" : 0
	lfomodvol(integer) : "LFO mod vol (0-100)" : 0
	cspinup(integer) : "Incremental spinup count" : 0
	spawnflags(flags) =
	[
		1: "Play Everywhere" : 0
		2: "Small Radius" : 0
		4: "Medium Radius" : 1
		8: "Large Radius" : 0
		16:"Start Silent":0
		32:"Is NOT Looped":0
	]
]

//
// ammo
//


@PointClass base(Weapon, Targetx) = ammo_9mmclip : "9mm Pistol Ammo" []
@PointClass base(Weapon, Targetx) = ammo_9mmAR : "9mm Assault Rifle Ammo" []
@PointClass base(Weapon, Targetx) = ammo_9mmbox : "box of 200 9mm shells" []
@PointClass base(Weapon, Targetx) = ammo_ARgrenades : "Assault Grenades" []
@PointClass base(Weapon, Targetx) = ammo_buckshot : "Shotgun Ammo" []
@PointClass base(Weapon, Targetx) = ammo_357 : "357 Ammo" []
@PointClass base(Weapon, Targetx) = ammo_rpgclip : "RPG Ammo" []
@PointClass base(Weapon, Targetx) = ammo_gaussclip : "Gauss Gun Ammo" []
@PointClass base(Weapon, Targetx) = ammo_crossbow : "Crossbow Ammo" []

@SolidClass base(TFCCriteria, TFCMisc) = button_target : "Target Button"
[
	target(target_destination) : "Targetted object"
	master(string) : "Master" 
	spawnflags(flags) =
	[
		1: "Use Activates" : 1
		2: "Start On" : 0
	]
]

//
// cyclers
//

@PointClass base(Targetname) size(-16 -16 0, 16 16 72) = cycler : "Monster Cycler" 
[
	model(studio) : "Model"
	renderfx(choices) :"Render FX" : 0 =
	[
		0: "Normal"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Slow Wide Pulse"
		4: "Fast Wide Pulse"
		9: "Slow Strobe"
		10: "Fast Strobe"
		11: "Faster Strobe"
		12: "Slow Flicker"
		13: "Fast Flicker"
		5: "Slow Fade Away"
		6: "Fast Fade Away"
		7: "Slow Become Solid"
		8: "Fast Become Solid"
		14: "Constant Glow"
		15: "Distort"
		16: "Hologram (Distort + fade)"
	]
	rendermode(choices) : "Render Mode" : 0 =
	[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
	]
	renderamt(integer) : "FX Amount (1 - 255)"
	rendercolor(color255) : "FX Color (R G B)" : "0 0 0"
]

@PointClass sprite() base(Targetname) = cycler_sprite : "Sprite Cycler" 
[
	model(sprite) : "Sprite"
	framerate(integer) : "Frames per second" : 10
	renderfx(choices) :"Render FX" : 0 =
	[
		0: "Normal"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Slow Wide Pulse"
		4: "Fast Wide Pulse"
		9: "Slow Strobe"
		10: "Fast Strobe"
		11: "Faster Strobe"
		12: "Slow Flicker"
		13: "Fast Flicker"
		5: "Slow Fade Away"
		6: "Fast Fade Away"
		7: "Slow Become Solid"
		8: "Fast Become Solid"
		14: "Constant Glow"
		15: "Distort"
		16: "Hologram (Distort + fade)"
	]
	rendermode(choices) : "Render Mode" : 0 =
	[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
	]
	renderamt(integer) : "FX Amount (1 - 255)"
	rendercolor(color255) : "FX Color (R G B)" : "0 0 0"
]

@PointClass base(Monster) size(-16 -16 -16, 16 16 16) = cycler_weapon : "Weapon Cycler" 
[
	model(studio) : "model"
]

//
// Environmental effects
//

@PointClass base(Targetname, RenderFxChoices) size(-16 -16 -16, 16 16 16) = env_beam : "Energy Beam Effect"
[
	LightningStart(target_destination) : "Start Entity" 
	LightningEnd(target_destination) : "Ending Entity" 
	Radius(integer) : "Radius" : 256
	renderamt(integer) : "Brightness (1 - 255)" : 100
	rendercolor(color255) : "Beam Color (R G B)" : "0 0 0"
	life(string) : "Life (seconds 0 = infinite)" : "1"
	BoltWidth(integer) : "Width of beam (pixels*0.1 0-255)" : 20
	NoiseAmplitude(integer) : "Amount of noise (0-255)" : 0
	texture(sprite) : "Sprite Name" : "sprites/laserbeam.spr"
	TextureScroll(integer) : "Texture Scroll Rate (0-100)" : 35
	framerate(integer) : "Frames per 10 seconds" : 0
	framestart(integer) : "Starting Frame" : 0
	StrikeTime(string) : "Strike again time (secs)" : "1"
	damage(string) : "Damage / second" : "0"
	spawnflags(flags) = 
	[
		1 : "Start On" : 0
		2 : "Toggle" : 0
		4 : "Random Strike" : 0
		8 : "Ring" : 0
		16: "StartSparks" : 0
		32: "EndSparks" : 0
		64: "Decal End" : 0
		128: "Shade Start" : 0
		256: "Shade End" : 0
	]
]

@PointClass base(Targetname) size(-4 -4 -4, 4 4 4) = env_beverage : "Beverage Dispenser"
[
	health(integer) : "Capacity" : 10
	skin(choices) : "Beverage Type" : 0= 
	[
		0 : "Coca-Cola"
		1 : "Sprite"
		2 : "Diet Coke"
		3 : "Orange"
		4 : "Surge"
		5 : "Moxie"
		6 : "Random"
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) color(255 0 0) = env_blood : "Blood Effects" 
[
	color(choices) : "Blood Color" : 0=
	[
		0 : "Red (Human)"
		1 : "Yellow (Alien)"
	]
	amount(string) : "Amount of blood (damage to simulate)" : "100"
	spawnflags(flags) =
	[
		1: "Random Direction" : 0
		2: "Blood Stream" : 0
		4: "On Player" : 0
		8: "Spray decals" : 0
	]
]

@SolidClass base(Targetname) = env_bubbles : "Bubble Volume" 
[
	density(integer) : "Bubble density" : 2
	frequency(integer) : "Bubble frequency" : 2
	current(integer) : "Speed of Current" : 0
	spawnflags(Flags) = 
	[
		1 : "Start Off" 	: 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_explosion : "Explosion" 
[
	iMagnitude(Integer) : "Magnitude" : 100
	spawnflags(flags) =
	[
		1: "No Damage" : 0
		2: "Repeatable" : 0
		4: "No Fireball" : 0
		8: "No Smoke" : 0
		16: "No Decal" : 0
		32: "No Sparks" : 0
	]
]

@PointClass base(Targetname) = env_global : "Global State"
[
	globalstate(string) : "Global State to Set"
	triggermode(choices) : "Trigger Mode" : 0 =
	[
		1 : "On"
		0 : "Off"
		3 : "Toggle"
		2 : "Dead"
	]
	initialstate(choices) : "Initial State" : 0 =
	[
		0 : "Off"
		1 : "On"
		2 : "Dead"
	]
	spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
	]
]

@PointClass sprite() base(Targetname, RenderFields) size(-4 -4 -4, 4 4 4) color(30 100 0) = env_glow : "Light Glow/Haze" 
[
	model(sprite) : "path/filename.spr of sprite" : "sprites/glow01.spr"
	scale(integer) : "Scale" : 1
]

@PointClass base(Targetname) = env_fade : "Screen Fade" 
[
	spawnflags(flags) =
	[
		1: "Fade From" : 0
		2: "Modulate" : 0
	]
	duration(string) : "Duration (seconds)" : "2"
	holdtime(string) : "Hold Fade (seconds)" : "0"
	renderamt(integer) : "Fade Alpha" : 255
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_funnel : "Large Portal Funnel" 
[
	spawnflags(flags) =
	[
		1: "Reverse" : 0
	]
]

@PointClass base(Targetname, RenderFxChoices) size(-16 -16 -16, 16 16 16) = env_laser : "Laser Beam Effect"
[
	LaserTarget(target_destination) : "Target of Laser" 
	renderamt(integer) : "Brightness (1 - 255)" : 100
	rendercolor(color255) : "Beam Color (R G B)" : "0 0 0"
	width(integer) : "Width of beam (pixels*0.1 0-255)" : 20
	NoiseAmplitude(integer) : "Amount of noise (0-255)" : 0
	texture(sprite) : "Sprite Name" : "sprites/laserbeam.spr"
	EndSprite(sprite) : "End Sprite" : ""
	TextureScroll(integer) : "Texture Scroll Rate (0-100)" : 35
	framestart(integer) : "Starting Frame" : 0
	damage(string) : "Damage / second" : "100"
	spawnflags(flags) = 
	[
		1 : "Start On" : 0
		16: "StartSparks" : 0
		32: "EndSparks" : 0
		64: "Decal End" : 0
	]
]

@PointClass base(Targetname, Target) = env_message : "HUD Text Message" 
[
	message(string) : "Message Name"
	spawnflags(flags) =
	[
		1: "Play Once" : 0
		2: "All Clients" : 0
	]
	messagesound(sound) : "path/filename.wav of WAV"
	messagevolume(string) : "Volume 0-10" : "10"
	messageattenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
	]
]

@PointClass base(Targetname, Target, RenderFields) size(-16 -16 -16, 16 16 16) color(100 100 0) = env_render : "Render Controls"
[
	spawnflags(flags) =
	[
		1: "No Renderfx" : 0
		2: "No Renderamt" : 0
		4: "No Rendermode" : 0
		8: "No Rendercolor" : 0
	]
]

@PointClass base(Targetname) = env_shake : "Screen Shake" 
[
	spawnflags(flags) =
	[
		1: "GlobalShake" : 0
	]
	amplitude(string) : "Amplitude 0-16" : "4"
	radius(string) : "Effect radius" : "500"
	duration(string) : "Duration (seconds)" : "1"
	frequency(string) : "0.1 = jerk, 255.0 = rumble" : "2.5"
]

@PointClass base(gibshooterbase, RenderFields) size(-16 -16 -16, 16 16 16) = env_shooter : "Model Shooter"
[
	shootmodel(studio) : "Model or Sprite name" : ""
	shootsounds(choices) :"Material Sound" : -1 =
	[
		-1: "None"
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "Concrete"  
	]
	scale(string) : "Gib Sprite Scale" : ""
	skin(integer) : "Gib Skin" : 0
]

@PointClass iconsprite("sprites/speaker.spr") = env_sound : "DSP Sound" 
[
	radius(integer) : "Radius" : 128
	roomtype(Choices) : "Room Type" : 0 =
	[
		0 : "Normal (off)"
		1 : "Generic"
		
		2 : "Metal Small"
		3 : "Metal Medium"
		4 : "Metal Large"
	
		5 : "Tunnel Small"
		6 : "Tunnel Medium"
		7 : "Tunnel Large"
	
		8 : "Chamber Small"
		9 : "Chamber Medium"
		10: "Chamber Large"

		11: "Bright Small"
		12: "Bright Medium"
		13: "Bright Large"

		14: "Water 1"
		15: "Water 2"
		16: "Water 3"

		17: "Concrete Small"
		18: "Concrete Medium"
		19: "Concrete Large"

		20: "Big 1"
		21: "Big 2"
		22: "Big 3"

		23: "Cavern Small"
		24: "Cavern Medium"
		25: "Cavern Large"

		26: "Weirdo 1"
		27: "Weirdo 2"
		28: "Weirdo 3"
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_spark : "Spark" 
[
	MaxDelay(string) : "Max Delay" : "0"
	spawnflags(flags) =
	[
		32: "Toggle" : 0
		64: "Start ON" : 0
	]
]

@PointClass sprite() base(Targetname, RenderFields) size(-4 -4 -4, 4 4 4) = env_sprite : "Sprite Effect" 
[
	framerate(string) : "Framerate" : "10.0"
	model(sprite) : "Sprite Name" : "sprites/glow01.spr"
	scale(string) : "Scale" : ""
	spawnflags(flags) =
	[
		1: "Start on" : 0
		2: "Play Once" : 0
	]
]

@SolidClass base(Breakable, RenderFields, TFCCriteria, TFCMisc) = func_breakable : "Breakable Object" 
[
	spawnflags(flags) =
	[
		1 : "Only Trigger" : 0
		2 : "Touch"	   : 0
		4 : "Pressure"     : 0
		256: "Instant Crowbar" : 1
	]
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, RenderFields, TFCCriteria, TFCMisc) = func_button : "Button" 
[
	speed(integer) : "Speed" : 5
	target(target_destination) : "Targetted object"
	health(integer) : "Health (shootable if > 0)"
	lip(integer) : "Lip"
	master(string) : "Master" 
	sounds(choices) : "Sounds" : 0 = 
	[
		0: "None"
		1: "Big zap & Warmup"
		2: "Access Denied"
		3: "Access Granted"
		4: "Quick Combolock"
		5: "Power Deadbolt 1"
		6: "Power Deadbolt 2"
		7: "Plunger"
		8: "Small zap"
		9: "Keycard Sound"
		10: "Buzz"
		11: "Buzz Off"
		14: "Lightswitch"
	]
	wait(integer) : "delay before reset (-1 stays)" : 3
	delay(string) : "Delay before trigger" : "0"
	spawnflags(flags) =
	[
		1: "Don't move" : 0
		32: "Toggle" : 0
		64: "Sparks" : 0
		256:"Touch Activates": 0
	]
	goal_activation(Choices) : "Goal Activation bitfields" : 0 =
	[
		0 : "0 - none"
		4 : "4 - when above NOT true"
		8 : "8 - return upon death-drop"
	]
	locked_sound(choices) : "Locked Sound" : 0 = 
	[
		0: "None"
		2: "Access Denied"
		8: "Small zap"
		10: "Buzz"
		11: "Buzz Off"
		12: "Latch Locked"
	]
	unlocked_sound(choices) : "Unlocked Sound" : 0 = 
	[
		0: "None"
		1: "Big zap & Warmup"
		3: "Access Granted"
		4: "Quick Combolock"
		5: "Power Deadbolt 1"
		6: "Power Deadbolt 2"
		7: "Plunger"
		8: "Small zap"
		9: "Keycard Sound"
		10: "Buzz"
		13: "Latch Unlocked"
		14: "Lightswitch"
	]
	locked_sentence(choices) : "Locked Sentence" : 0 = 
	[
		0: "None"
		1: "Gen. Access Denied"
		2: "Security Lockout"
		3: "Blast Door"
		4: "Fire Door"
		5: "Chemical Door"
		6: "Radiation Door"
		7: "Gen. Containment"
		8: "Maintenance Door"
		9: "Broken Shut Door"
	]
	unlocked_sentence(choices) : "Unlocked Sentence" : 0 = 
	[
		0: "None"
		1: "Gen. Access Granted"
		2: "Security Disengaged"
		3: "Blast Door"
		4: "Fire Door"
		5: "Chemical Door"
		6: "Radiation Door"
		7: "Gen. Containment"
		8: "Maintenance area"
	]
	_minlight(string) : "Minimum light level"
	goal_activation(choices) : "Goal Activation" : 0 =
	[
		0 : "None"
		8 : "Activate when hit by spanner"
	]
]

@SolidClass base(RenderFields, Targetname) = func_conveyor : "Conveyor Belt" 
[
	spawnflags(flags) =
	[
		1 : "No Push" : 0
		2 : "Not Solid" : 0
	]
	speed(string) : "Conveyor Speed" : "100"
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Door, TFCCriteria, TFCMisc) = func_door : "Basic door"
[
	goal_activation(choices) : "Goal Activation" : 0 =
	[
		0 : "None"
		8 : "Activate when hit by spanner"
	]
]

@SolidClass base(Door, TFCCriteria, TFCMisc) = func_door_rotating : "Rotating door" 
[
	spawnflags(flags) =
	[
		2 : "Reverse Dir" : 0
		16: "One-way" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
	distance(integer) : "Distance (deg)" : 90
	angles(string) : "Pitch Yaw Roll (Y Z X)" : "0 0 0"
]

@SolidClass base(Appearflags, RenderFields) = func_friction : "Surface with a change in friction" 
[
	modifier(integer) : "Percentage of standard (0 - 100)" : 15
]

@SolidClass base(Targetname, RenderFields, Global, TFCCriteria, TFCMisc) = func_guntarget : "Moving platform" 
[
	speed(integer) : "Speed (units per second)" : 100
	target(target_source) : "First stop target"
	message(string) : "Fire on damage"
	health(integer) : "Damage to Take" : 0
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Global) = func_healthcharger: "Wall health recharger" 
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, RenderFields) = func_illusionary : "Fake Wall/Light" 
[

	skin(choices) : "Contents" : -1 =
	[
		-1: "Empty"
		-7: "Volumetric Light"
	]
	_minlight(string) : "Minimum light level"
]

@SolidClass = func_ladder : "Ladder" []

@SolidClass base(Targetname) = func_monsterclip : "Monster clip brush" []

@SolidClass base(Targetname) = func_mortar_field : "Mortar Field" 
[
	m_flSpread(integer) : "Spread Radius" : 64
	m_iCount(integer) : "Repeat Count" : 1
	m_fControl(Choices) : "Targeting" : 0 =
	[
		0 : "Random"
		1 : "Activator"
		2 : "Table"
	]
	m_iszXController(target_destination) : "X Controller"
	m_iszYController(target_destination) : "Y Controller"
]

@SolidClass base(Appearflags, Targetname, RenderFields) = func_pendulum : "Swings back and forth" 
[
	speed(integer) : "Speed" : 100
	distance(integer) : "Distance (deg)" : 90
	damp(integer) : "Damping (0-1000)" : 0
	dmg(integer) : "Damage inflicted when blocked" : 0
	spawnflags(flags) =
	[
		1: "Start ON" : 0
		8: "Passable" : 0
		16: "Auto-return" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]

	_minlight(integer) : "_minlight"
	angles(string) : "Pitch Yaw Roll (Y Z X)" : "0 0 0"
]

@SolidClass base(Targetname, RenderFields, PlatSounds, TFCCriteria, TFCMisc) = func_plat : "Elevator" 
[
	spawnflags(Flags) =
	[
		1: "Toggle" : 0
	]
	height(integer) : "Travel altitude (can be negative)" : 0
	speed(integer) : "Speed" : 50
	_minlight(string) : "Minimum light level"
]	

@SolidClass base(Targetname, RenderFields, PlatSounds, TFCCriteria, TFCMisc) = func_platrot : "Moving Rotating platform" 
[
	spawnflags(Flags) =
	[
		1: "Toggle" : 1
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
	speed(integer) : "Speed of rotation" : 50
	height(integer) : "Travel altitude (can be negative)" : 0
	rotation(integer) : "Spin amount" : 0
	angles(string) : "Pitch Yaw Roll (Y Z X)" : "0 0 0"
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Breakable, RenderFields, TFCCriteria, TFCMisc) = func_pushable : "Pushable object"
[
	size(choices) : "Hull Size" : 0 =
	[
		0: "Point size"
		1: "Player size"
		2: "Big Size"
		3: "Player duck"
	]
	spawnflags(flags) =
	[
		128: "Breakable" : 0
	]
	friction(integer) : "Friction (0-400)" : 50
	buoyancy(integer) : "Buoyancy" : 20
	_minlight(string) : "Minimum light level"
]

@SolidClass = func_recharge: "Battery recharger" 
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, TFCCriteria, TFCMisc) = func_rot_button : "RotatingButton" 
[
	target(target_destination) : "Targetted object"
	// changetarget will change the button's target's TARGET field to the button's changetarget.
	changetarget(target_destination) : "ChangeTarget Name"
	master(string) : "Master" 
	speed(integer) : "Speed" : 50
	health(integer) : "Health (shootable if > 0)"
	goal_activation(Choices) : "Goal Activation bitfields" : 0 =
	[
		0 : "0 - none"
		4 : "4 - when above NOT true"
		8 : "8 - return upon death-drop"
	]
	sounds(choices) : "Sounds" : 21 = 
	[
		21: "Squeaky"
		22: "Squeaky Pneumatic"
		23: "Ratchet Groan"
		24: "Clean Ratchet"
		25: "Gas Clunk"
	]
	wait(integer) : "Delay before reset (-1 stays)" : 3
	delay(string) : "Delay before trigger" : "0"
	distance(integer) : "Distance (deg)" : 90
	spawnflags(flags) =
	[
		1 : "Not solid" : 0
		2 : "Reverse Dir" : 0
		32: "Toggle" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
		256:"Touch Activates": 0
	]
	_minlight(integer) : "_minlight"
	angles(string) : "Pitch Yaw Roll (Y Z X)" : "0 0 0"
]

@SolidClass base(Targetname, RenderFields) = func_rotating : "Rotating Object"
[
	speed(integer)	: "Rotation Speed" : 0
	volume(integer) : "Volume (10 = loudest)" : 10
	fanfriction(integer) : "Friction (0 - 100%)" : 20
	sounds(choices) : "Fan Sounds" : 0 =
	[
		0 : "No Sound" 
		1 : "Fast Whine"
		2 : "Slow Rush"
		3 : "Medium Rickety"
		4 : "Fast Beating"
		5 : "Slow Smooth"
	]
	message(sound) : "Path/filename.wav of WAV"
	spawnflags(flags) =
	[
		1 : "Start ON" 		: 0
		2 : "Reverse Direction" : 0
		4 : "X Axis" 		: 0
		8 : "Y Axis" 		: 0
		16: "Acc/Dcc"		: 0
		32: "Fan Pain"		: 0
		64: "Not Solid"		: 0
		128: "Small Radius" : 0
		256: "Medium Radius" : 0
		512: "Large Radius" : 1	
	]
	_minlight(integer) : "_minlight"
	angles(string) : "Pitch Yaw Roll (Y Z X)" : "0 0 0"
	spawnorigin(string) : "X Y Z - Move here after lighting" : "0 0 0"
	dmg(integer) : "Damage inflicted when blocked" : 0
]

@SolidClass base(BaseTank) = func_tank : "Brush Gun Turret" 
[
	bullet(choices) : "Bullets" : 0 = 
	[
		0: "None"
		1: "9mm"
		2: "MP5"
		3: "12mm"
	]
]

@SolidClass = func_tankcontrols : "Tank controls"
[
	target(target_destination) : "Tank entity name"
]

@SolidClass base(BaseTank) = func_tanklaser : "Brush Laser Turret" 
[
	laserentity(target_source) : "env_laser Entity"
]

@SolidClass base(BaseTank) = func_tankrocket : "Brush Rocket Turret" []


@SolidClass base(BaseTank) = func_tankmortar : "Brush Mortar Turret" 
[
	iMagnitude(Integer) : "Explosion Magnitude" : 100
]

@SolidClass base(Trackchange) = func_trackautochange : "Automatic track changing platform"
[
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Trackchange) = func_trackchange : "Train track changing platform"
[
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, RenderFields, Global) = func_tracktrain : "Track Train" 
[
	spawnflags(flags) =
	[
		1 : "No Pitch (X-rot)" : 0
		2 : "No User Control" : 0
		8 : "Passable" : 0
	]
	target(target_destination) : "First stop target"
	sounds(choices) : "Sound" : 0 =
	[
		0: "None"
		1: "Rail 1"
		2: "Rail 2"
		3: "Rail 3"
		4: "Rail 4"
		5: "Rail 6"
		6: "Rail 7"
	]
	wheels(integer) : "Distance between the wheels" : 50
	height(integer) : "Height above track" : 4
	startspeed(integer) : "Initial speed" : 0
	speed(integer) : "Speed (units per second)" : 64
	dmg(integer) : "Damage on crush" : 0	
	volume(integer) : "Volume (10 = loudest)" : 10
	bank(string) : "Bank angle on turns" : "0"
	_minlight(string) : "Minimum light level"
]

@SolidClass = func_traincontrols : "Train Controls"
[
	target(target_destination) : "Train Name"
]

@SolidClass base(Targetname, RenderFields, Global) = func_train : "Moving platform" 
[
	target(target_source) : "First stop target"
	movesnd(choices) : "Move Sound" : 0 = 
	[
		0: "No Sound"
		1: "big elev 1"
		2: "big elev 2"
		3: "tech elev 1"
		4: "tech elev 2"
		5: "tech elev 3"
		6: "freight elev 1"
		7: "freight elev 2"
		8: "heavy elev"
		9: "rack elev"
		10: "rail elev"
		11: "squeek elev"
		12: "odd elev 1"
		13: "odd elev 2"
	]
	stopsnd(choices) : "Stop Sound" : 0 = 
	[
		0: "No Sound"
		1: "big elev stop1"
		2: "big elev stop2"
		3: "freight elev stop"
		4: "heavy elev stop"
		5: "rack stop"
		6: "rail stop"
		7: "squeek stop"
		8: "quick stop"
	]
	speed(integer) : "Speed (units per second)" : 64
	dmg(integer) : "Damage on crush" : 0
	skin(integer) : "Contents" : 0
	volume(string) : "Sound Volume 0.0 - 1.0" : "0.85"
	spawnflags(flags) =
	[
		8 : "Not solid" : 0
	]
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Appearflags, RenderFields, Global) = func_wall : "Wall" 
[
	_minlight(string) : "Minimum light level"
]

@SolidClass base(func_wall) = func_wall_toggle : "Toggleable geometry" 
[
	spawnflags(flags) =
	[
		1 : "Starts Invisible" : 0
	]
]

@SolidClass base(Door) = func_water : "Liquid" 
[
	spawnflags(flags) =
	[
		1 : "Starts Open" : 0
		256:"Use Only" : 0
	]
	skin(choices) : "Contents" : -3 =
	[
		-3: "Water"
		-4: "Slime"
		-5: "Lava"
	]
	WaveHeight(string) : "Wave Height" : "3.2"
]

@PointClass base(gibshooterbase) = gibshooter : "Gib Shooter" []

//
// info entities
//

@PointClass decal() base(Targetname, Appearflags) = infodecal : "Decal"
[
	texture(decal)
]

@PointClass base(Targetname) size(-24 -24 0, 24 24 16) color(20 190 60) = info_bigmomma : "Big Mamma Node" 
[
	spawnflags(Flags) =
	[
		1 : "Run To Node" : 0
		2 : "Wait Indefinitely" : 0
	]
	target(target_destination) : "Next node"
	radius(string) : "Radius" : "0"
	reachdelay(string) : "Wait after approach" : "0"
	killtarget(target_destination) : "KillTarget"
	reachtarget(target_destination) : "Fire on approach"
	reachsequence(string) : "Sequence on approach" : ""
	health(string) : "Health on approach" : ""
	presequence(string) : "Sequence before approach" : ""
]

@PointClass base(Target) size(-4 -4 -4, 4 4 4) color(0 255 0) = info_intermission : "Intermission Spot" []

@PointClass base(Targetname) = info_landmark : "Transition Landmark" []

@PointClass size(-24 -24 -4, 24 24 4) color(255 255 0) = info_node : "ai node" []

@PointClass size(-32 -32 0, 32 32 64) color(255 255 0) = info_node_air : "ai air node" []

@PointClass base(Targetname) = info_null : "info_null (spotlight target)" []

@PointClass base(PlayerClass) = info_player_coop : "Player cooperative start" []
@PointClass base(PlayerClass) = info_player_deathmatch : "Player deathmatch start" []
@PointClass base(PlayerClass) = info_player_start : "Player 1 start" []

@PointClass base(Targetname) size(-4 -4 -4, 4 4 4) color(200 100 50) = info_target : "Beam Target" []
@PointClass size(-8 -8 0, 8 8 16) base(PlayerClass, Targetname) = info_teleport_destination : "Teleport destination" []

//
// items
//

@PointClass size(-16 -16 0, 16 16 36) base(TFCCriteria, TFCMisc, OwnedBy, Weapon, Targetx) = item_airtank : "Oxygen tank" []
@PointClass size(-16 -16 0, 16 16 36) base(TFCCriteria, TFCMisc, OwnedBy, Weapon, Targetx) = item_antidote : "Poison antidote" []
@PointClass size(-16 -16 0, 16 16 36) base(TFCCriteria, TFCMisc, OwnedBy, Weapon, Targetx) = item_battery : "HEV battery" []
@PointClass size(-16 -16 0, 16 16 36) base(TFCCriteria, TFCMisc, OwnedBy, Weapon, Targetx) = item_healthkit : "Small Health Kit" []
@PointClass size(-16 -16 0, 16 16 36) base(TFCCriteria, TFCMisc, OwnedBy, Weapon, Targetx) = item_longjump : "Longjump Module" []
@PointClass size(-16 -16 0, 16 16 36) base(TFCCriteria, TFCMisc, OwnedBy, Weapon, Targetx) = item_security : "Security card" []
@PointClass size(-16 -16 0, 16 16 36) base(TFCCriteria, TFCMisc, OwnedBy, Weapon, Targetx) = item_suit : "HEV Suit" 
[
	spawnflags(Flags) =
	[
		1 : "Short Logon" : 0
	]
]

//
// lights
//

@PointClass iconsprite("sprites/lightbulb.spr") base(Target, Targetname, Light) = light : "Invisible lightsource"
[
	spawnflags(Flags) = [ 1 : "Initially dark" : 0 ]
]

@PointClass iconsprite("sprites/lightbulb.spr") base(Targetname, Target) = light_spot : "Spotlight" 
[
	_cone(integer) : "Inner (bright) angle" : 30
	_cone2(integer) : "Outer (fading) angle" : 45
	pitch(integer) : "Pitch" : -90
	_light(color255) : "Brightness" : "255 255 128 200"
	_sky(Choices) : "Is Sky" : 0 = 
	[ 
		0 : "No"
		1 : "Yes"
	]
	spawnflags(Flags) = [ 1 : "Initially dark" : 0 ]
      style(Choices) : "Appearance" : 0 =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	pattern(string) : "Custom Appearance"
]

@PointClass iconsprite("sprites/lightbulb.spr") = light_environment : "Environment" 
[
	pitch(integer) : "Pitch" : 0
	_light(color255) : "Brightness" : "255 255 128 200"
]

@SolidClass base(Door) = momentary_door : "Momentary/Continuous door" 
[
	spawnflags(flags) =
	[
		1 : "Starts Open" : 0
	]
]

@SolidClass base(RenderFields, Targetname, TFCCriteria, TFCMisc) = momentary_rot_button : "Direct wheel control" 
[
	target(target_destination) : "Targetted object"
	speed(integer) : "Speed" : 50
	master(string) : "Master" 
	sounds(choices) : "Sounds" : 0 = 
	[
		0: "None"
		1: "Big zap & Warmup"
		2: "Access Denied"
		3: "Access Granted"
		4: "Quick Combolock"
		5: "Power Deadbolt 1"
		6: "Power Deadbolt 2"
		7: "Plunger"
		8: "Small zap"
		9: "Keycard Sound"
		21: "Squeaky"
		22: "Squeaky Pneumatic"
		23: "Ratchet Groan"
		24: "Clean Ratchet"
		25: "Gas Clunk"
	]
	distance(integer) : "Distance (deg)" : 90
	returnspeed(integer) : "Auto-return speed" : 0
	spawnflags(flags) =
	[
		1: "Door Hack" : 0
		2: "Not useable" : 0
		16: "Auto Return" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
	_minlight(integer) : "_minlight"
	angles(string) : "Pitch Yaw Roll (Y Z X)" : "0 0 0"
]

//
// monsters
//

@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_alien_controller : "Controller"  []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-32 -32 0, 32 32 64) = monster_alien_grunt : "Alien Grunt" 
[
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_alien_slave : "Vortigaunt" 
[
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		64 : "IgnorePlayer" : 0
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-360 -360 -172, 360 360 8) = monster_apache : "Apache" 
[
	spawnflags(Flags) = 
	[
		8 : "NoWreckage"	: 0
		64 : "Start Inactive" : 0
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 36) = monster_babycrab : "Baby Headcrab" []
@PointClass base(RenderFields, TFCCriteria, TFCMisc) size(-16 -16 -36, 16 16 0) = monster_barnacle : "Barnacle Monster" []
@PointClass base(Monster,TalkMonster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_barney : "Barney" []
@PointClass base(RenderFields,Appearflags, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_barney_dead : "Dead Barney" 
[
      pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On side"
		2 : "On stomach"
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-95 -95 0, 95 95 190) = monster_bigmomma : "Big Mamma" 
[
	netname(string) : "First node" : ""
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_bloater : "Bloater" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-32 -32 0, 32 32 64) = monster_bullchicken : "BullChicken" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-3 -3 0, 3 3 3) = monster_cockroach : "Cockroach" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 16) = monster_flyer_flock : "Flock of Flyers" 
[
	iFlockSize(Integer) : "Flock Size" : 8
	flFlockRadius(Integer) : "Flock Radius" : 128
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_furniture : "Monster Furniture" 
[
	model(studio) : "model"

]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-32 -32 0, 32 32 128) = monster_gargantua : "Gargantua" []
@PointClass base(Monster, RenderFields, TFCCriteria, TFCMisc) size(-16 -16 -36, 16 16 36) = monster_generic : "Generic Script Monster" 
[
	spawnflags(Flags) = 
	[
		4 : "Not solid"	: 0
	]
	model(studio) : "model"
	body(Integer) : "Body" : 0
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_gman : "G-Man" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_grunt_repel : "Human Grunt (Repel)" []
@PointClass base(Weapon, Targetx, RenderFields) = monster_handgrenade : "Live Handgrenade" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 36) = monster_headcrab : "Head Crab" []
@PointClass base(Appearflags,RenderFields, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_hevsuit_dead : "Dead HEV Suit" 
[
      pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "Seated"
		2 : "On stomach"
		3 : "On Table"
	]
]
@PointClass base(Appearflags,RenderFields, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_hgrunt_dead : "Dead Human Grunt" 
[
      pose(Choices) : "Pose" : 0 =
	[
		0 : "On stomach"
		1 : "On side"
		2 : "Seated"
	]
	body(Choices) : "Body" : 0 =
	[
		0 : "Grunt with Gun"
		1 : "Commander with Gun"
		2 : "Grunt no Gun"
		3 : "Commander no Gun"
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 36) = monster_houndeye : "Houndeye" 
[
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_human_assassin : "Human Assassin" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_human_grunt : "Human Grunt (camo)" 
[
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
	netname(string) : "Squad Name"
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun"
		10 : "Shotgun + HG"
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-32 -32 0, 32 32 64) = monster_ichthyosaur : "Ichthyosaur" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-6 -6 0, 6 6 6) = monster_leech : "Leech" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 -32, 16 16 32) = monster_miniturret : "Mini Auto Turret"
[
	orientation(Choices) : "Orientation" : 0 =
	[
		0 : "Floor Mount"
		1 : "Ceiling Mount"
	]
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-192 -192 0, 192 192 384) = monster_nihilanth : "Nihilanth"  []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-480 -480 -112, 480 480 24) = monster_osprey : "Osprey"
[
	spawnflags(Flags) = 
	[
		64 : "Start Inactive" : 0
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-6 -6 0, 6 6 6) = monster_rat : "Rat (no ai?)" []
@PointClass base(Weapon,Targetx,RenderFields) = monster_satchelcharge : "Live Satchel Charge" []
@PointClass base(Monster, TalkMonster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_scientist : "Scared Scientist" 
[
      body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
]
@PointClass base(Appearflags,RenderFields, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_scientist_dead : "Dead Scientist" 
[
      body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
      pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On Stomach"
		2 : "Sitting"
		3 : "Hanging"
		4 : "Table1"
		5 : "Table2"
		6 : "Table3"
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-14 -14 22, 14 14 72) = monster_sitting_scientist : "Sitting Scientist" 
[
      body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_sentry : "Sentry Turret Gun"
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 36) = monster_snark : "Armed Snark" []
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-32 -32 0, 32 32 64) = monster_tentacle : "Tentacle Arm" 
[
	sweeparc(integer) : "Sweep Arc" : 130
	sound(Choices) : "Tap Sound" : -1 =
	[
		-1 : "None"
		0 : "Silo"
		1 : "Dirt"
		2 : "Water"
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) = monster_tripmine : "Active Tripmine" 
[
	spawnflags(Flags) =
	[
		1 : "Instant On" : 1
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-32 -32 -32, 32 32 32) = monster_turret : "Auto Turret"
[
	orientation(Choices) : "Orientation" : 0 =
	[
		0 : "Floor Mount"
		1 : "Ceiling Mount"
	]
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
	]
]
@PointClass base(Monster, TFCCriteria, TFCMisc) size(-16 -16 0, 16 16 72) = monster_zombie : "Scientist Zombie" []
@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = monstermaker : "Monster Maker"
[
	target(string) : "Target On Release" 
	monstertype(string) : "Monster Type"
	netname(string) : "Childrens' Name"
	spawnflags(Flags) = 
	[
		1 : "Start ON" 	: 0
		2 : "PVS On/Off" : 0
		4 : "Cyclic" : 0
		8 : "MonsterClip" : 0
	]

	// how many monsters the monstermaker can create (-1 = unlimited)
	monstercount(integer) : "Number of Monsters" : -1
	
	// if delay is -1, new monster will be made when last monster dies.
	// else, delay is how often (seconds) a new monster will be dookied out.
	delay(string) : "Frequency" : "5"

	// maximum number of live children allowed at one time. (New ones will not be made until one dies)
	// -1 no limit
	m_imaxlivechildren(integer) : "Max live children" : 5
]

@PointClass base(Targetname) = multi_manager : "MultiTarget Manager" 
[
	spawnflags(Flags) = 
	[
		1 : "multithreaded" : 0
	]
]

@PointClass base(Targetname, Target) = multisource : "Multisource"
[
	globalstate(string) : "Global State Master"
]

@PointClass base(Targetname) size(16 16 16) color(247 181 82) = path_corner : "Moving platform stop"
[
	spawnflags(Flags) =
	[
		1: "Wait for retrigger" : 0
		2: "Teleport" : 0
		4: "Fire once" : 0
	]
	target(target_destination) : "Next stop target"
	message(target_destination) : "Fire On Pass"
	wait(integer) : "Wait here (secs)" : 0
	speed(integer) : "New Train Speed" : 0
	yaw_speed(integer) : "New Train rot. Speed" : 0
]

@PointClass base(Targetname) size(16 16 16) = path_track : "Train Track Path"
[
	spawnflags(Flags) =
	[
		1: "Disabled" : 0
		2: "Fire once" : 0
		4: "Branch Reverse" : 0
		8: "Disable train" : 0
	]
	target(target_destination) : "Next stop target"
	message(target_destination) : "Fire On Pass"
	altpath(target_destination) : "Branch Path"
	netname(target_destination) : "Fire on dead end"
	speed(integer) : "New Train Speed" : 0
]

//
// player effects
//

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_loadsaved : "Load Auto-Saved game" 
[
	duration(string) : "Fade Duration (seconds)" : "2"
	holdtime(string) : "Hold Fade (seconds)" : "0"
	renderamt(integer) : "Fade Alpha" : 255
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"
	messagetime(string) : "Show Message delay" : "0"
	message(string) : "Message To Display" : ""
	loadtime(string) : "Reload delay" : "0"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_weaponstrip : "Strips player's weapons" []

@PointClass base(Targetname, Targetx) size(-16 -16 0, 16 16 72) color(255 0 255) = scripted_sentence : "Scripted Sentence"
[
	spawnflags(Flags) = 
	[
		1 : "Fire Once" 	: 1
		2 : "Followers Only"	: 0
		4 : "Interrupt Speech"	: 1
		8 : "Concurrent"	: 0
	]
	sentence(string) : "Sentence Name" : ""
	entity(string) : "Speaker Type"
	duration(string) : "Sentence Time" : "3"
	radius(integer) : "Search Radius" : 512
	refire(string) : "Delay Before Refire" : "3"
	listener(string) : "Listener Type"
	volume(string) : "Volume 0-10" : "10"
	attenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
	]
]

@PointClass base(Targetname, Targetx) size(-16 -16 0, 16 16 72) color(255 0 255) = scripted_sequence : "Scripted Sequence"
[
	m_iszEntity(string) : "Target Monster"
	m_iszIdle(string) : "Idle Animation" : ""
	m_iszPlay(string) : "Action Animation" : ""
	m_flRadius(integer) : "Search Radius" : 512
	m_flRepeat(integer) : "Repeat Rate ms" : 0
	m_fMoveTo(choices) : "Move to Position" : 0 =
	[
		0 : "No"
		1 : "Walk"
		2 : "Run"
		4 : "Instantaneous"
		5 : "No - Turn to Face"
	]
	spawnflags(Flags) = 
	[
		4 : "Repeatable"	: 0
		8 : "Leave Corpse"	: 0
		32: "No Interruptions"	: 0
		64: "Override AI"	: 0
		128: "No Script Movement" : 0
	]
]

@PointClass iconsprite("sprites/speaker.spr") base(Targetname) = speaker : "Announcement Speaker"
[
	preset(choices) :"Announcement Presets" : 0 =
	[
		0: "None"
		1: "C1A0 Announcer"
		2: "C1A1 Announcer"
		3: "C1A2 Announcer"
		4: "C1A3 Announcer"
		5: "C1A4 Announcer"  
		6: "C2A1 Announcer"
		7: "C2A2 Announcer"
		// 8: "C2A3 Announcer"
		9: "C2A4 Announcer"
		// 10: "C2A5 Announcer"
		11: "C3A1 Announcer"
		12: "C3A2 Announcer"
	]
	message(string) : "Sentence Group Name"
	health(integer) : "Volume (10 = loudest)" : 5
	spawnflags(flags) =
	[
		1: "Start Silent" : 0
	]
]

@PointClass base(Targetname) = target_cdaudio : "CD Audio Target"
[
	health(choices) : "Track #" : -1 =
	[
		-1 : "Stop"
		1 : "Track 1"
		2 : "Track 2"
		3 : "Track 3"
		4 : "Track 4"
		5 : "Track 5"
		6 : "Track 6"
		7 : "Track 7"
		8 : "Track 8"
		9 : "Track 9"
		10 : "Track 10"
		11 : "Track 11"
		12 : "Track 12"
		13 : "Track 13"
		14 : "Track 14"
		15 : "Track 15"
		16 : "Track 16"
		17 : "Track 17"
		18 : "Track 18"
		19 : "Track 19"
		20 : "Track 20"
		21 : "Track 21"
		22 : "Track 22"
		23 : "Track 23"
		24 : "Track 24"
		25 : "Track 25"
		26 : "Track 26"
		27 : "Track 27"
		28 : "Track 28"
		29 : "Track 29"
		30 : "Track 30"
	]
	radius(string) : "Player Radius"
]

//
// Triggers
//

@PointClass base(Targetx) = trigger_auto : "AutoTrigger"
[
	spawnflags(Flags) =
	[
		1 : "Remove On fire" : 1
	]
	globalstate(string) : "Global State to Read"
	triggerstate(choices) : "Trigger State" : 0 = 
	[
		0 : "Off"
		1 : "On"
		2 : "Toggle"
	]
]

@SolidClass base(Targetname) = trigger_autosave : "AutoSave Trigger"
[
	master(string) : "Master" 
]

@PointClass base(Targetx, Targetname) = trigger_camera : "Trigger Camera" 
[
	wait(integer) : "Hold time" : 10
	moveto(string) : "Path Corner"
	spawnflags(flags) =
	[
		1: "Start At Player" : 1
		2: "Follow Player" : 1
		4: "Freeze Player" : 0
	]
	speed(string) : "Initial Speed" : "0"
	acceleration(string) : "Acceleration units/sec^2" : "500"
	deceleration(string) : "Stop Deceleration units/sec^2" : "500"
]

@SolidClass base(Targetname) = trigger_cdaudio : "Trigger CD Audio"
[
	health(choices) : "Track #" : -1 =
	[
		-1 : "Stop"
		1 : "Track 1"
		2 : "Track 2"
		3 : "Track 3"
		4 : "Track 4"
		5 : "Track 5"
		6 : "Track 6"
		7 : "Track 7"
		8 : "Track 8"
		9 : "Track 9"
		10 : "Track 10"
		11 : "Track 11"
		12 : "Track 12"
		13 : "Track 13"
		14 : "Track 14"
		15 : "Track 15"
		16 : "Track 16"
		17 : "Track 17"
		18 : "Track 18"
		19 : "Track 19"
		20 : "Track 20"
		21 : "Track 21"
		22 : "Track 22"
		23 : "Track 23"
		24 : "Track 24"
		25 : "Track 25"
		26 : "Track 26"
		27 : "Track 27"
		28 : "Track 28"
		29 : "Track 29"
		30 : "Track 30"
	]
]

@SolidClass = trigger_changelevel : "Trigger: Change level"
[
	targetname(string) : "Name"
	map(string) : "New map name"
	landmark(string) : "Landmark name"
	changetarget(target_destination) : "Change Target"
	changedelay(string) : "Delay before change target" : "0"
	spawnflags(flags) =
	[
		1: "No Intermission" : 0
		2: "USE Only" : 0
	]
]

@PointClass base(Targetx, Targetname) = trigger_changetarget : "Trigger Change Target"
[
	m_iszNewTarget(string) : "New Target"
]

@SolidClass base(Trigger, Targetname, TFCCriteria, TFCMisc) = trigger_counter : "Trigger counter" 
[
	spawnflags(flags) = 
	[ 
		1 : "No Message" : 0 
	]
	master(string) : "Master" 
	count(integer) : "Count before activation" : 2
]

@SolidClass base(Targetname) = trigger_endsection : "EndSection Trigger"
[
	section(string) : "Section"
	spawnflags(flags) =
	[
		1: "USE Only" : 0
	]
]

@SolidClass base(Trigger) = trigger_gravity : "Trigger Gravity"
[
	gravity(integer) : "Gravity (0-1)" : 1
]

@SolidClass base(Targetname,Target, TFCCriteria, TFCMisc) = trigger_hurt : "Trigger player hurt" 
[
	spawnflags(flags) = 
	[ 
		1: "Target Once" : 0 
		2: "Start Off" : 0
		8: "No clients" : 0
		16:"FireClientOnly" : 0
		32:"TouchClientOnly" : 0
	]
	master(string) : "Master" 
	dmg(integer) : "Damage" : 10
	delay(string) : "Delay before trigger" : "0"
	damagetype(choices) : "Damage Type" : 0 =
	[
		0 : "GENERIC"
		1 : "CRUSH"
		2 : "BULLET"
		4 : "SLASH"
		8 : "BURN"
		16 : "FREEZE"
		32 : "FALL"
		64 : "BLAST"
		128 : "CLUB"
		256 : "SHOCK"
		512 : "SONIC"
		1024 : "ENERGYBEAM"
		16384: "DROWN"
		32768 : "PARALYSE"
		65536 : "NERVEGAS"
		131072 : "POISON"
		262144 : "RADIATION"
		524288 : "DROWNRECOVER"
		1048576 : "CHEMICAL"
		2097152 : "SLOWBURN"
		4194304 : "SLOWFREEZE"
	]
]

@SolidClass = trigger_monsterjump : "Trigger monster jump" 
[
	master(string) : "Master" 
	speed(integer) : "Jump Speed" : 40
	height(integer) : "Jump Height" : 128
]

@SolidClass base(Trigger, TFCCriteria, TFCMisc) = trigger_multiple : "Trigger: Activate multiple" 
[
	wait(integer) : "Delay before reset" : 10
]

@SolidClass base(Trigger, TFCCriteria, TFCMisc) = trigger_once : "Trigger: Activate once" []

@SolidClass base(Trigger, TFCCriteria, TFCMisc) = trigger_push : "Trigger player push"
[
	spawnflags(flags) = 
	[ 
		1: "Once Only" : 0 
		2: "Start Off" : 0
	]
	speed(integer) : "Speed of push" : 40
]

@PointClass base(Targetname, Targetx, TFCCriteria, TFCMisc) = trigger_relay : "Trigger Relay"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
	]
	triggerstate(choices) : "Trigger State" : 0 = 
	[
		0: "Off"
		1: "On"
		2: "Toggle"
	]
]

@SolidClass base(Trigger, TFCCriteria, TFCMisc) = trigger_teleport : "Trigger teleport" []

@SolidClass base(Targetname) = trigger_transition : "Trigger: Select Transition Area" []

//
// weapons
//

@PointClass base(Weapon, Targetx) = weapon_crowbar : "Crowbar" []
@PointClass base(Weapon, Targetx) = weapon_9mmhandgun : "9mm Handgun" []
@PointClass base(Weapon, Targetx) = weapon_357 : "357 Handgun" []
@PointClass base(Weapon, Targetx) = weapon_9mmAR : "9mm Assault Rifle" []
@PointClass base(Weapon, Targetx) = weapon_shotgun : "Shotgun" []
@PointClass base(Weapon, Targetx) = weapon_rpg : "RPG" []
@PointClass base(Weapon, Targetx) = weapon_gauss : "Gauss Gun" []
@PointClass base(Weapon, Targetx) = weapon_crossbow : "Crossbow" []
@PointClass base(Weapon, Targetx) = weapon_egon : "Egon Gun" []
@PointClass base(Weapon, Targetx) size(-16 -16 -5, 16 16 27) = weapon_tripmine : "Tripmine Ammo" []
@PointClass base(Weapon, Targetx) = weapon_satchel : "Satchel Charge Ammo" []
@PointClass base(Weapon, Targetx) = weapon_handgrenade : "Handgrenade Ammo" []
@PointClass base(Weapon, Targetx) = weapon_snark : "Squeak Grenade" []
@PointClass base(Weapon, Targetx) = weapon_hornetgun : "Hornet Gun" []
@PointClass size(-16 -16 0, 16 16 64) color(0 128 0) base(TFCCriteria, TFCMisc) =  weaponbox : "Weapon/Ammo Container" []


@PointClass base(Weapon, Targetx) = world_items : "World Items" 
[
	type(choices) :"types" : 42 =
	[
		44: "Battery"
		42: "Antidote"
		43: "Security Card"
		45: "Suit"
	]
]

//
// Xen
//

@PointClass base(Target, Targetname, RenderFields) size(-48 -48 0, 48 48 32 ) = xen_plantlight : "Xen Plant Light" []
@PointClass base(Targetname, RenderFields) size(-8 -8 0, 8 8 32 ) = xen_hair : "Xen Hair" 
[
	spawnflags(Flags) = 
	[
		1 : "Sync Movement" 	: 0
	]
]
@PointClass base(Targetname, RenderFields) size(-24 -24 0, 24 24 188 ) = xen_tree : "Xen Tree" []
@PointClass base(Targetname, RenderFields) size(-16 -16 0, 16 16 64 ) = xen_spore_small : "Xen Spore (small)" []
@PointClass base(Targetname, RenderFields) size(-40 -40 0, 40 40 120 ) = xen_spore_medium : "Xen Spore (medium)" []
@PointClass base(Targetname, RenderFields) size(-90 -90 0, 90 90 220 ) = xen_spore_large : "Xen Spore (large)" []
